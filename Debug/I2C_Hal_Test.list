
I2C_Hal_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003384  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dec  08003534  08003534  00013534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004320  08004320  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004328  08004328  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004328  08004328  00014328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800432c  0800432c  0001432c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004330  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          000004f0  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000568  20000568  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000122f2  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002761  00000000  00000000  0003239a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00034b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d48  00000000  00000000  00035948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024fd5  00000000  00000000  00036690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f35  00000000  00000000  0005b665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daafa  00000000  00000000  0006d59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00148094  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fa8  00000000  00000000  001480e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800351c 	.word	0x0800351c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	0800351c 	.word	0x0800351c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <adc_conf>:
#define PORTA_EN    (1U<<0)
#define ADC_CH1     (1U<<0)
#define ADC_ON      (1U<<0)

void adc_conf (void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

	RCC->APB2ENR |= ADC1_EN;
 800058c:	4b14      	ldr	r3, [pc, #80]	; (80005e0 <adc_conf+0x58>)
 800058e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000590:	4a13      	ldr	r2, [pc, #76]	; (80005e0 <adc_conf+0x58>)
 8000592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000596:	6453      	str	r3, [r2, #68]	; 0x44

	//PA1 usato per analog ADC1
	RCC->AHB1ENR |= PORTA_EN;
 8000598:	4b11      	ldr	r3, [pc, #68]	; (80005e0 <adc_conf+0x58>)
 800059a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059c:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <adc_conf+0x58>)
 800059e:	f043 0301 	orr.w	r3, r3, #1
 80005a2:	6313      	str	r3, [r2, #48]	; 0x30
	//PA0 analog mode
	/*GPIOA->MODER |= (1U<<0);
	  GPIOA->MODER |= (1U<<1);*/

	//PA1 analog mode
	GPIOA->MODER |= (1U<<2);
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <adc_conf+0x5c>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <adc_conf+0x5c>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <adc_conf+0x5c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <adc_conf+0x5c>)
 80005b6:	f043 0308 	orr.w	r3, r3, #8
 80005ba:	6013      	str	r3, [r2, #0]

	//nel registro ADC_SQR ci sono diverse posizioni. In ognuna si deve mettere in posizione ordinata il canale dell'adc che si andrà a leggere
	//partendo dal primo che è SQ1 andando avanti. Il numero del canale deve essere messo in binario.

	ADC1->SQR3 = ADC_CH1;      //nei primi 5 bit che indicano la prima sequenza SQ1 si mette il numero del canale, in questo caso 1 in binario.
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <adc_conf+0x60>)
 80005be:	2201      	movs	r2, #1
 80005c0:	635a      	str	r2, [r3, #52]	; 0x34

	//il bit L contenuto in SQR1 (dal bit 20 al 24) indica la lunghezza della sequenza, ovvero il numero di conversioni da effettuare.
	//in questo caso è solo una, perchè si utilizzerà un solo canale. Per la lunghezza di 1 la sequenza è 0000.

	ADC1->SQR1 = 0X00; // in realtà si mettono tutti a zero perchè le altre sequenze non contano.
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <adc_conf+0x60>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c




	//per abilitare l'adc si setta il bit contenuto nel registro ADC_CR2
	ADC1->CR2 |= ADC_ON;
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <adc_conf+0x60>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	4a06      	ldr	r2, [pc, #24]	; (80005e8 <adc_conf+0x60>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6093      	str	r3, [r2, #8]
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40020000 	.word	0x40020000
 80005e8:	40012000 	.word	0x40012000

080005ec <start_conv>:


void start_conv(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
	//per abilitare la conversione continua
	ADC1->CR2 |= (1U<<1);
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <start_conv+0x28>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <start_conv+0x28>)
 80005f6:	f043 0302 	orr.w	r3, r3, #2
 80005fa:	6093      	str	r3, [r2, #8]

	ADC1->CR2 |= (1U<<30);
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <start_conv+0x28>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <start_conv+0x28>)
 8000602:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000606:	6093      	str	r3, [r2, #8]
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40012000 	.word	0x40012000

08000618 <read_conv>:


uint32_t read_conv(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
	//attendere fine conversione
	//la fine della conversione è indicata da un bit presente nel registro ADC_SR status register (bit EOC end of conversion)
	while (!(ADC1->SR & (1U<<1))) {};  //in attesa della fine della conversione
 800061c:	bf00      	nop
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <read_conv+0x20>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0f9      	beq.n	800061e <read_conv+0x6>


	//infine restituisce il valore letto
	return (ADC1->DR);
 800062a:	4b03      	ldr	r3, [pc, #12]	; (8000638 <read_conv+0x20>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800062e:	4618      	mov	r0, r3
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	40012000 	.word	0x40012000

0800063c <i2c_bus_scan>:

	I2C1->CR1 |= (1U << 0);  //PE

}

int i2c_bus_scan(void) {
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
	int a = 0; //address variable
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]

	int c = 0;
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]

	for (uint8_t i = 0; i < 128; i++) //go through all 127 address
 800064a:	2300      	movs	r3, #0
 800064c:	72fb      	strb	r3, [r7, #11]
 800064e:	e040      	b.n	80006d2 <i2c_bus_scan+0x96>
			{

		I2C1->CR1 |= I2C_CR1_START; //generate start
 8000650:	4b25      	ldr	r3, [pc, #148]	; (80006e8 <i2c_bus_scan+0xac>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a24      	ldr	r2, [pc, #144]	; (80006e8 <i2c_bus_scan+0xac>)
 8000656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800065a:	6013      	str	r3, [r2, #0]

		while (!(I2C1->SR1 & I2C_SR1_SB)); // wait to start to be generated
 800065c:	bf00      	nop
 800065e:	4b22      	ldr	r3, [pc, #136]	; (80006e8 <i2c_bus_scan+0xac>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0f9      	beq.n	800065e <i2c_bus_scan+0x22>

		I2C1->DR = (i << 1 | 0); // transmit the address
 800066a:	7afb      	ldrb	r3, [r7, #11]
 800066c:	005a      	lsls	r2, r3, #1
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <i2c_bus_scan+0xac>)
 8000670:	611a      	str	r2, [r3, #16]

		while (!(I2C1->SR1) | !(I2C1->SR2)) {}; //clear status register
 8000672:	bf00      	nop
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <i2c_bus_scan+0xac>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	2b00      	cmp	r3, #0
 800067a:	bf0c      	ite	eq
 800067c:	2301      	moveq	r3, #1
 800067e:	2300      	movne	r3, #0
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <i2c_bus_scan+0xac>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	2b00      	cmp	r3, #0
 8000688:	bf0c      	ite	eq
 800068a:	2301      	moveq	r3, #1
 800068c:	2300      	movne	r3, #0
 800068e:	b2db      	uxtb	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1ed      	bne.n	8000674 <i2c_bus_scan+0x38>

		I2C1->CR1 |= I2C_CR1_STOP; //generate stop condition
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <i2c_bus_scan+0xac>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a12      	ldr	r2, [pc, #72]	; (80006e8 <i2c_bus_scan+0xac>)
 800069e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006a2:	6013      	str	r3, [r2, #0]

		//delay(100); //minium wait time is 40 uS, but for sure, leave it 100 uS

		for (int b = 0; b < 1000; b++) {};
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	e002      	b.n	80006b0 <i2c_bus_scan+0x74>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	3301      	adds	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80006b6:	dbf8      	blt.n	80006aa <i2c_bus_scan+0x6e>

		a = (I2C1->SR1 & I2C_SR1_ADDR); //read the status register address set
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <i2c_bus_scan+0xac>)
 80006ba:	695b      	ldr	r3, [r3, #20]
 80006bc:	f003 0302 	and.w	r3, r3, #2
 80006c0:	603b      	str	r3, [r7, #0]

		if (a == 2) //if the address is valid
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d101      	bne.n	80006cc <i2c_bus_scan+0x90>

			/*collegamento precedente pa9->rx
			 * pa10->tx , pa1->adc
			 */

			c = i;
 80006c8:	7afb      	ldrb	r3, [r7, #11]
 80006ca:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 128; i++) //go through all 127 address
 80006cc:	7afb      	ldrb	r3, [r7, #11]
 80006ce:	3301      	adds	r3, #1
 80006d0:	72fb      	strb	r3, [r7, #11]
 80006d2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	daba      	bge.n	8000650 <i2c_bus_scan+0x14>

		}

	}
	return c;
 80006da:	68fb      	ldr	r3, [r7, #12]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	40005400 	.word	0x40005400

080006ec <i2c_writeByte>:

	I2C1->CR1 |= I2C_CR1_STOP;

}

void i2c_writeByte(uint8_t saddr, uint8_t maddr, uint8_t data) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
 80006f6:	460b      	mov	r3, r1
 80006f8:	71bb      	strb	r3, [r7, #6]
 80006fa:	4613      	mov	r3, r2
 80006fc:	717b      	strb	r3, [r7, #5]

	i2c_start();
 80006fe:	f000 f853 	bl	80007a8 <i2c_start>
	//send address

	i2c_writeAddress(saddr);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f87d 	bl	8000804 <i2c_writeAddress>

	i2c_writeRegister(maddr);
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f899 	bl	8000844 <i2c_writeRegister>

	i2c_writeData(data);
 8000712:	797b      	ldrb	r3, [r7, #5]
 8000714:	4618      	mov	r0, r3
 8000716:	f000 f8b5 	bl	8000884 <i2c_writeData>

	i2c_stop();
 800071a:	f000 f863 	bl	80007e4 <i2c_stop>
//	while(!(I2C1->SR1&I2C_SR1_TXE)){;}       /*wait until data register empty*/
//	I2C1->DR = data;
//	while (!(I2C1->SR1 & I2C_SR1_BTF));      /*wait until transfer finished*/
//	I2C1->CR1 |=I2C_CR1_STOP;								 /*Generate Stop*/

}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
	...

08000728 <i2c_writeMulti>:

void i2c_writeMulti (uint8_t saddr, uint8_t maddr, uint8_t *data, uint8_t size)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	603a      	str	r2, [r7, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
 8000736:	460b      	mov	r3, r1
 8000738:	71bb      	strb	r3, [r7, #6]
 800073a:	4613      	mov	r3, r2
 800073c:	717b      	strb	r3, [r7, #5]
2. Keep Sending DATA to the DR Register after performing the check if the TXE bit is set
3. Once the DATA transfer is complete, Wait for the BTF (bit 2 in SR1) to set. This indicates the end of LAST DATA transmission
*/

		//start
		i2c_start();
 800073e:	f000 f833 	bl	80007a8 <i2c_start>

		//send address
		i2c_writeAddress(saddr);
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	4618      	mov	r0, r3
 8000746:	f000 f85d 	bl	8000804 <i2c_writeAddress>

		//write reg
		i2c_writeRegister(maddr);
 800074a:	79bb      	ldrb	r3, [r7, #6]
 800074c:	4618      	mov	r0, r3
 800074e:	f000 f879 	bl	8000844 <i2c_writeRegister>

		while (!(I2C1->SR1 & (1<<7)));  // wait for TXE bit to set
 8000752:	bf00      	nop
 8000754:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <i2c_writeMulti+0x7c>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075c:	2b00      	cmp	r3, #0
 800075e:	d0f9      	beq.n	8000754 <i2c_writeMulti+0x2c>
		while (size)
 8000760:	e00f      	b.n	8000782 <i2c_writeMulti+0x5a>
		{
			while (!(I2C1->SR1 & (1<<7)));  // wait for TXE bit to set
 8000762:	bf00      	nop
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <i2c_writeMulti+0x7c>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076c:	2b00      	cmp	r3, #0
 800076e:	d0f9      	beq.n	8000764 <i2c_writeMulti+0x3c>
			I2C1->DR = (uint32_t )*data++;  // send data
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	1c5a      	adds	r2, r3, #1
 8000774:	603a      	str	r2, [r7, #0]
 8000776:	781a      	ldrb	r2, [r3, #0]
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <i2c_writeMulti+0x7c>)
 800077a:	611a      	str	r2, [r3, #16]
			size--;
 800077c:	797b      	ldrb	r3, [r7, #5]
 800077e:	3b01      	subs	r3, #1
 8000780:	717b      	strb	r3, [r7, #5]
		while (size)
 8000782:	797b      	ldrb	r3, [r7, #5]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d1ec      	bne.n	8000762 <i2c_writeMulti+0x3a>
		}

		while (!(I2C1->SR1 & (1<<2)));  // wait for BTF to set
 8000788:	bf00      	nop
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <i2c_writeMulti+0x7c>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	2b00      	cmp	r3, #0
 8000794:	d0f9      	beq.n	800078a <i2c_writeMulti+0x62>

		//stop
		i2c_stop();
 8000796:	f000 f825 	bl	80007e4 <i2c_stop>

}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40005400 	.word	0x40005400

080007a8 <i2c_start>:

void i2c_start(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
	I2C1->CR1 |= (1<<10);  // Enable the ACK
 80007ac:	4b0c      	ldr	r3, [pc, #48]	; (80007e0 <i2c_start+0x38>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <i2c_start+0x38>)
 80007b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007b6:	6013      	str	r3, [r2, #0]
	I2C1->CR1 |= (1<<8);  // Generate START
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <i2c_start+0x38>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <i2c_start+0x38>)
 80007be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c2:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & (1<<0)));  // Wait for SB bit to set
 80007c4:	bf00      	nop
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <i2c_start+0x38>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d0f9      	beq.n	80007c6 <i2c_start+0x1e>
}
 80007d2:	bf00      	nop
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40005400 	.word	0x40005400

080007e4 <i2c_stop>:


void i2c_stop(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

	//stop
	I2C1->CR1 |= (1<<9);  // Stop I2C
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <i2c_stop+0x1c>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <i2c_stop+0x1c>)
 80007ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007f2:	6013      	str	r3, [r2, #0]

}
 80007f4:	bf00      	nop
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40005400 	.word	0x40005400

08000804 <i2c_writeAddress>:

void i2c_writeAddress(uint8_t saddr)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
	//send address
	I2C1->DR = saddr;  //  send the address
 800080e:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <i2c_writeAddress+0x3c>)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & (1 << 1)));  // wait for ADDR bit to set
 8000814:	bf00      	nop
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <i2c_writeAddress+0x3c>)
 8000818:	695b      	ldr	r3, [r3, #20]
 800081a:	f003 0302 	and.w	r3, r3, #2
 800081e:	2b00      	cmp	r3, #0
 8000820:	d0f9      	beq.n	8000816 <i2c_writeAddress+0x12>
	uint8_t temp = I2C1->SR1 | I2C1->SR2; // read SR1 and SR2 to clear the ADDR bit
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <i2c_writeAddress+0x3c>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <i2c_writeAddress+0x3c>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4313      	orrs	r3, r2
 8000830:	73fb      	strb	r3, [r7, #15]

}
 8000832:	bf00      	nop
 8000834:	3714      	adds	r7, #20
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40005400 	.word	0x40005400

08000844 <i2c_writeRegister>:

void i2c_writeRegister(uint8_t maddr)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	//write reg
	while (!(I2C1->SR1 & (1<<7)));  // wait for TXE bit to set
 800084e:	bf00      	nop
 8000850:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <i2c_writeRegister+0x3c>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0f9      	beq.n	8000850 <i2c_writeRegister+0xc>
	I2C1->DR = maddr;
 800085c:	4a08      	ldr	r2, [pc, #32]	; (8000880 <i2c_writeRegister+0x3c>)
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & (1<<2)));  // wait for BTF bit to set
 8000862:	bf00      	nop
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <i2c_writeRegister+0x3c>)
 8000866:	695b      	ldr	r3, [r3, #20]
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0f9      	beq.n	8000864 <i2c_writeRegister+0x20>

}
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40005400 	.word	0x40005400

08000884 <i2c_writeData>:

void i2c_writeData(uint8_t data)
{	//write data
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	while (!(I2C1->SR1 & (1<<7)));  // wait for TXE bit to set
 800088e:	bf00      	nop
 8000890:	4b0b      	ldr	r3, [pc, #44]	; (80008c0 <i2c_writeData+0x3c>)
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000898:	2b00      	cmp	r3, #0
 800089a:	d0f9      	beq.n	8000890 <i2c_writeData+0xc>
	I2C1->DR = data;
 800089c:	4a08      	ldr	r2, [pc, #32]	; (80008c0 <i2c_writeData+0x3c>)
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & (1<<2)));  // wait for BTF bit to set
 80008a2:	bf00      	nop
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <i2c_writeData+0x3c>)
 80008a6:	695b      	ldr	r3, [r3, #20]
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d0f9      	beq.n	80008a4 <i2c_writeData+0x20>
}
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	40005400 	.word	0x40005400

080008c4 <main>:
int n;
char *res;

uint32_t readValue;

int main(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
	adc_conf();
 80008ca:	f7ff fe5d 	bl	8000588 <adc_conf>
	   //attivando la conversione continua non è necessario attivare la conversione ogni volta ma solo una volta
	start_conv();
 80008ce:	f7ff fe8d 	bl	80005ec <start_conv>

	HAL_Init();
 80008d2:	f000 fd5f 	bl	8001394 <HAL_Init>

	SystemClock_Config();
 80008d6:	f000 f86f 	bl	80009b8 <SystemClock_Config>

	MX_GPIO_Init();
 80008da:	f000 f919 	bl	8000b10 <MX_GPIO_Init>
	MX_I2C1_Init();
 80008de:	f000 f8d7 	bl	8000a90 <MX_I2C1_Init>
	//i2c_init();
	SSD1306_Init();  // initialize
 80008e2:	f000 f955 	bl	8000b90 <SSD1306_Init>

	// lets print some string
	int number;
	char *Results;
	//char Results[10];
	number = i2c_bus_scan();
 80008e6:	f7ff fea9 	bl	800063c <i2c_bus_scan>
 80008ea:	61b8      	str	r0, [r7, #24]

	HAL_Delay(1000);
 80008ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f0:	f000 fd92 	bl	8001418 <HAL_Delay>
	int ret = sprintf(Results, "I2C %d",ret);
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4929      	ldr	r1, [pc, #164]	; (800099c <main+0xd8>)
 80008f8:	6978      	ldr	r0, [r7, #20]
 80008fa:	f002 f99f 	bl	8002c3c <siprintf>
 80008fe:	6138      	str	r0, [r7, #16]

	char *buf;


	itoa(number,buf,10);
 8000900:	220a      	movs	r2, #10
 8000902:	68f9      	ldr	r1, [r7, #12]
 8000904:	69b8      	ldr	r0, [r7, #24]
 8000906:	f002 f98f 	bl	8002c28 <itoa>
	char msg[]="aaa";
 800090a:	4b25      	ldr	r3, [pc, #148]	; (80009a0 <main+0xdc>)
 800090c:	60bb      	str	r3, [r7, #8]
//	SSD1306_UpdateScreen();
//	HAL_Delay(4000);
//
//	SSD1306_Clear();

	SSD1306_Puts("HELLO", &Font_11x18, 1);
 800090e:	2201      	movs	r2, #1
 8000910:	4924      	ldr	r1, [pc, #144]	; (80009a4 <main+0xe0>)
 8000912:	4825      	ldr	r0, [pc, #148]	; (80009a8 <main+0xe4>)
 8000914:	f000 fb2e 	bl	8000f74 <SSD1306_Puts>
	SSD1306_GotoXY(10, 30);
 8000918:	211e      	movs	r1, #30
 800091a:	200a      	movs	r0, #10
 800091c:	f000 fa94 	bl	8000e48 <SSD1306_GotoXY>
	SSD1306_Puts(Results, &Font_11x18, 1);
 8000920:	2201      	movs	r2, #1
 8000922:	4920      	ldr	r1, [pc, #128]	; (80009a4 <main+0xe0>)
 8000924:	6978      	ldr	r0, [r7, #20]
 8000926:	f000 fb25 	bl	8000f74 <SSD1306_Puts>
    HAL_Delay(100);
 800092a:	2064      	movs	r0, #100	; 0x64
 800092c:	f000 fd74 	bl	8001418 <HAL_Delay>
	//SSD1306_Puts("AAA",&Font_11x18, 1);
	SSD1306_UpdateScreen(); //display
 8000930:	f000 f9e4 	bl	8000cfc <SSD1306_UpdateScreen>
	int i=0;
 8000934:	2300      	movs	r3, #0
 8000936:	61fb      	str	r3, [r7, #28]
	HAL_Delay(2000);
 8000938:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800093c:	f000 fd6c 	bl	8001418 <HAL_Delay>

	SSD1306_Clear();
 8000940:	f000 fb3d 	bl	8000fbe <SSD1306_Clear>
			char c[5];
			//sprintf(c,"%d",i);

			//SSD1306_Clear();
			//HAL_Delay(10);
			SSD1306_GotoXY(0, 0);
 8000944:	2100      	movs	r1, #0
 8000946:	2000      	movs	r0, #0
 8000948:	f000 fa7e 	bl	8000e48 <SSD1306_GotoXY>
			SSD1306_Puts("Counter...", &Font_11x18, 1);
 800094c:	2201      	movs	r2, #1
 800094e:	4915      	ldr	r1, [pc, #84]	; (80009a4 <main+0xe0>)
 8000950:	4816      	ldr	r0, [pc, #88]	; (80009ac <main+0xe8>)
 8000952:	f000 fb0f 	bl	8000f74 <SSD1306_Puts>
		//	SSD1306_GotoXY(10, 30);
		//	SSD1306_Puts(c, &Font_11x18, 1);
			SSD1306_UpdateScreen(); //display
 8000956:	f000 f9d1 	bl	8000cfc <SSD1306_UpdateScreen>
			SSD1306_GotoXY(10, 40);
 800095a:	2128      	movs	r1, #40	; 0x28
 800095c:	200a      	movs	r0, #10
 800095e:	f000 fa73 	bl	8000e48 <SSD1306_GotoXY>
			readValue=read_conv();
 8000962:	f7ff fe59 	bl	8000618 <read_conv>
 8000966:	4603      	mov	r3, r0
 8000968:	461a      	mov	r2, r3
 800096a:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <main+0xec>)
 800096c:	601a      	str	r2, [r3, #0]
			sprintf(c,"%d",readValue);
 800096e:	4b10      	ldr	r3, [pc, #64]	; (80009b0 <main+0xec>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	463b      	mov	r3, r7
 8000974:	490f      	ldr	r1, [pc, #60]	; (80009b4 <main+0xf0>)
 8000976:	4618      	mov	r0, r3
 8000978:	f002 f960 	bl	8002c3c <siprintf>
			SSD1306_Puts(c, &Font_11x18, 1);
 800097c:	463b      	mov	r3, r7
 800097e:	2201      	movs	r2, #1
 8000980:	4908      	ldr	r1, [pc, #32]	; (80009a4 <main+0xe0>)
 8000982:	4618      	mov	r0, r3
 8000984:	f000 faf6 	bl	8000f74 <SSD1306_Puts>


			SSD1306_UpdateScreen(); //display
 8000988:	f000 f9b8 	bl	8000cfc <SSD1306_UpdateScreen>

			HAL_Delay(50);
 800098c:	2032      	movs	r0, #50	; 0x32
 800098e:	f000 fd43 	bl	8001418 <HAL_Delay>

			i++;
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3301      	adds	r3, #1
 8000996:	61fb      	str	r3, [r7, #28]
	while (1) {
 8000998:	e7d4      	b.n	8000944 <main+0x80>
 800099a:	bf00      	nop
 800099c:	08003534 	.word	0x08003534
 80009a0:	00616161 	.word	0x00616161
 80009a4:	20000000 	.word	0x20000000
 80009a8:	0800353c 	.word	0x0800353c
 80009ac:	08003544 	.word	0x08003544
 80009b0:	20000504 	.word	0x20000504
 80009b4:	08003550 	.word	0x08003550

080009b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b094      	sub	sp, #80	; 0x50
 80009bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80009be:	f107 0320 	add.w	r3, r7, #32
 80009c2:	2230      	movs	r2, #48	; 0x30
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 f930 	bl	8002c2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
 80009da:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <SystemClock_Config+0xd0>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e4:	4a28      	ldr	r2, [pc, #160]	; (8000a88 <SystemClock_Config+0xd0>)
 80009e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ea:	6413      	str	r3, [r2, #64]	; 0x40
 80009ec:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <SystemClock_Config+0xd0>)
 80009ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f4:	60bb      	str	r3, [r7, #8]
 80009f6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009f8:	2300      	movs	r3, #0
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <SystemClock_Config+0xd4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <SystemClock_Config+0xd4>)
 8000a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0a:	6013      	str	r3, [r2, #0]
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <SystemClock_Config+0xd4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a22:	2302      	movs	r3, #2
 8000a24:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000a2c:	2304      	movs	r3, #4
 8000a2e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8000a30:	2354      	movs	r3, #84	; 0x54
 8000a32:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a38:	2307      	movs	r3, #7
 8000a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000a3c:	f107 0320 	add.w	r3, r7, #32
 8000a40:	4618      	mov	r0, r3
 8000a42:	f001 f95b 	bl	8001cfc <HAL_RCC_OscConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x98>
		Error_Handler();
 8000a4c:	f000 f89a 	bl	8000b84 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000a50:	230f      	movs	r3, #15
 8000a52:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a54:	2302      	movs	r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a60:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a66:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000a68:	f107 030c 	add.w	r3, r7, #12
 8000a6c:	2102      	movs	r1, #2
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f001 fbbc 	bl	80021ec <HAL_RCC_ClockConfig>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0xc6>
		Error_Handler();
 8000a7a:	f000 f883 	bl	8000b84 <Error_Handler>
	}
}
 8000a7e:	bf00      	nop
 8000a80:	3750      	adds	r7, #80	; 0x50
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	40007000 	.word	0x40007000

08000a90 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000a96:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <MX_I2C1_Init+0x78>)
 8000a98:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000a9a:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000a9c:	4a1b      	ldr	r2, [pc, #108]	; (8000b0c <MX_I2C1_Init+0x7c>)
 8000a9e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ab2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000acc:	480d      	ldr	r0, [pc, #52]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ace:	f000 ff55 	bl	800197c <HAL_I2C_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000ad8:	f000 f854 	bl	8000b84 <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000adc:	2100      	movs	r1, #0
 8000ade:	4809      	ldr	r0, [pc, #36]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000ae0:	f001 f890 	bl	8001c04 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8000aea:	f000 f84b 	bl	8000b84 <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000aee:	2100      	movs	r1, #0
 8000af0:	4804      	ldr	r0, [pc, #16]	; (8000b04 <MX_I2C1_Init+0x74>)
 8000af2:	f001 f8c3 	bl	8001c7c <HAL_I2CEx_ConfigDigitalFilter>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C1_Init+0x70>
		Error_Handler();
 8000afc:	f000 f842 	bl	8000b84 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200004b0 	.word	0x200004b0
 8000b08:	40005400 	.word	0x40005400
 8000b0c:	00061a80 	.word	0x00061a80

08000b10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <MX_GPIO_Init+0x4c>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <MX_GPIO_Init+0x4c>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <MX_GPIO_Init+0x4c>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_GPIO_Init+0x4c>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <MX_GPIO_Init+0x4c>)
 8000b3c:	f043 0302 	orr.w	r3, r3, #2
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_GPIO_Init+0x4c>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0302 	and.w	r3, r3, #2
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]

}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d101      	bne.n	8000b76 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000b72:	f000 fc31 	bl	80013d8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40010000 	.word	0x40010000

08000b84 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
}
 8000b8a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b8c:	e7fe      	b.n	8000b8c <Error_Handler+0x8>
	...

08000b90 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000b96:	f000 fa1b 	bl	8000fd0 <ssd1306_I2C_Init>
//		/* Return false */
//		return 0;
//	}
//
	/* A little delay */
	uint32_t p = 2500;
 8000b9a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000b9e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ba0:	e002      	b.n	8000ba8 <SSD1306_Init+0x18>
		p--;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	3b01      	subs	r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d1f9      	bne.n	8000ba2 <SSD1306_Init+0x12>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000bae:	22ae      	movs	r2, #174	; 0xae
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2078      	movs	r0, #120	; 0x78
 8000bb4:	f000 fa65 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000bb8:	2220      	movs	r2, #32
 8000bba:	2100      	movs	r1, #0
 8000bbc:	2078      	movs	r0, #120	; 0x78
 8000bbe:	f000 fa60 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000bc2:	2210      	movs	r2, #16
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2078      	movs	r0, #120	; 0x78
 8000bc8:	f000 fa5b 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000bcc:	22b0      	movs	r2, #176	; 0xb0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2078      	movs	r0, #120	; 0x78
 8000bd2:	f000 fa56 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000bd6:	22c8      	movs	r2, #200	; 0xc8
 8000bd8:	2100      	movs	r1, #0
 8000bda:	2078      	movs	r0, #120	; 0x78
 8000bdc:	f000 fa51 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	2078      	movs	r0, #120	; 0x78
 8000be6:	f000 fa4c 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000bea:	2210      	movs	r2, #16
 8000bec:	2100      	movs	r1, #0
 8000bee:	2078      	movs	r0, #120	; 0x78
 8000bf0:	f000 fa47 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000bf4:	2240      	movs	r2, #64	; 0x40
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2078      	movs	r0, #120	; 0x78
 8000bfa:	f000 fa42 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000bfe:	2281      	movs	r2, #129	; 0x81
 8000c00:	2100      	movs	r1, #0
 8000c02:	2078      	movs	r0, #120	; 0x78
 8000c04:	f000 fa3d 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000c08:	22ff      	movs	r2, #255	; 0xff
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2078      	movs	r0, #120	; 0x78
 8000c0e:	f000 fa38 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000c12:	22a1      	movs	r2, #161	; 0xa1
 8000c14:	2100      	movs	r1, #0
 8000c16:	2078      	movs	r0, #120	; 0x78
 8000c18:	f000 fa33 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000c1c:	22a6      	movs	r2, #166	; 0xa6
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2078      	movs	r0, #120	; 0x78
 8000c22:	f000 fa2e 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000c26:	22a8      	movs	r2, #168	; 0xa8
 8000c28:	2100      	movs	r1, #0
 8000c2a:	2078      	movs	r0, #120	; 0x78
 8000c2c:	f000 fa29 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000c30:	223f      	movs	r2, #63	; 0x3f
 8000c32:	2100      	movs	r1, #0
 8000c34:	2078      	movs	r0, #120	; 0x78
 8000c36:	f000 fa24 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c3a:	22a4      	movs	r2, #164	; 0xa4
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	2078      	movs	r0, #120	; 0x78
 8000c40:	f000 fa1f 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000c44:	22d3      	movs	r2, #211	; 0xd3
 8000c46:	2100      	movs	r1, #0
 8000c48:	2078      	movs	r0, #120	; 0x78
 8000c4a:	f000 fa1a 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2100      	movs	r1, #0
 8000c52:	2078      	movs	r0, #120	; 0x78
 8000c54:	f000 fa15 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c58:	22d5      	movs	r2, #213	; 0xd5
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	2078      	movs	r0, #120	; 0x78
 8000c5e:	f000 fa10 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000c62:	22f0      	movs	r2, #240	; 0xf0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2078      	movs	r0, #120	; 0x78
 8000c68:	f000 fa0b 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000c6c:	22d9      	movs	r2, #217	; 0xd9
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2078      	movs	r0, #120	; 0x78
 8000c72:	f000 fa06 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000c76:	2222      	movs	r2, #34	; 0x22
 8000c78:	2100      	movs	r1, #0
 8000c7a:	2078      	movs	r0, #120	; 0x78
 8000c7c:	f000 fa01 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000c80:	22da      	movs	r2, #218	; 0xda
 8000c82:	2100      	movs	r1, #0
 8000c84:	2078      	movs	r0, #120	; 0x78
 8000c86:	f000 f9fc 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000c8a:	2212      	movs	r2, #18
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	2078      	movs	r0, #120	; 0x78
 8000c90:	f000 f9f7 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000c94:	22db      	movs	r2, #219	; 0xdb
 8000c96:	2100      	movs	r1, #0
 8000c98:	2078      	movs	r0, #120	; 0x78
 8000c9a:	f000 f9f2 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2078      	movs	r0, #120	; 0x78
 8000ca4:	f000 f9ed 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000ca8:	228d      	movs	r2, #141	; 0x8d
 8000caa:	2100      	movs	r1, #0
 8000cac:	2078      	movs	r0, #120	; 0x78
 8000cae:	f000 f9e8 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000cb2:	2214      	movs	r2, #20
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2078      	movs	r0, #120	; 0x78
 8000cb8:	f000 f9e3 	bl	8001082 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000cbc:	22af      	movs	r2, #175	; 0xaf
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2078      	movs	r0, #120	; 0x78
 8000cc2:	f000 f9de 	bl	8001082 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000cc6:	222e      	movs	r2, #46	; 0x2e
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2078      	movs	r0, #120	; 0x78
 8000ccc:	f000 f9d9 	bl	8001082 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	f000 f841 	bl	8000d58 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000cd6:	f000 f811 	bl	8000cfc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000cda:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <SSD1306_Init+0x168>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SSD1306_Init+0x168>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SSD1306_Init+0x168>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000cec:	2301      	movs	r3, #1
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000494 	.word	0x20000494

08000cfc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000d02:	2300      	movs	r3, #0
 8000d04:	71fb      	strb	r3, [r7, #7]
 8000d06:	e01d      	b.n	8000d44 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	3b50      	subs	r3, #80	; 0x50
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	461a      	mov	r2, r3
 8000d10:	2100      	movs	r1, #0
 8000d12:	2078      	movs	r0, #120	; 0x78
 8000d14:	f000 f9b5 	bl	8001082 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2078      	movs	r0, #120	; 0x78
 8000d1e:	f000 f9b0 	bl	8001082 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000d22:	2210      	movs	r2, #16
 8000d24:	2100      	movs	r1, #0
 8000d26:	2078      	movs	r0, #120	; 0x78
 8000d28:	f000 f9ab 	bl	8001082 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	01db      	lsls	r3, r3, #7
 8000d30:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <SSD1306_UpdateScreen+0x58>)
 8000d32:	441a      	add	r2, r3
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	2140      	movs	r1, #64	; 0x40
 8000d38:	2078      	movs	r0, #120	; 0x78
 8000d3a:	f000 f95f 	bl	8000ffc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	3301      	adds	r3, #1
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	2b07      	cmp	r3, #7
 8000d48:	d9de      	bls.n	8000d08 <SSD1306_UpdateScreen+0xc>
	}
}
 8000d4a:	bf00      	nop
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000094 	.word	0x20000094

08000d58 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <SSD1306_Fill+0x14>
 8000d68:	2300      	movs	r3, #0
 8000d6a:	e000      	b.n	8000d6e <SSD1306_Fill+0x16>
 8000d6c:	23ff      	movs	r3, #255	; 0xff
 8000d6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d72:	4619      	mov	r1, r3
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <SSD1306_Fill+0x2c>)
 8000d76:	f001 ff59 	bl	8002c2c <memset>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000094 	.word	0x20000094

08000d88 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80fb      	strh	r3, [r7, #6]
 8000d92:	460b      	mov	r3, r1
 8000d94:	80bb      	strh	r3, [r7, #4]
 8000d96:	4613      	mov	r3, r2
 8000d98:	70fb      	strb	r3, [r7, #3]
	if (
 8000d9a:	88fb      	ldrh	r3, [r7, #6]
 8000d9c:	2b7f      	cmp	r3, #127	; 0x7f
 8000d9e:	d848      	bhi.n	8000e32 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000da0:	88bb      	ldrh	r3, [r7, #4]
 8000da2:	2b3f      	cmp	r3, #63	; 0x3f
 8000da4:	d845      	bhi.n	8000e32 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000da6:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <SSD1306_DrawPixel+0xb8>)
 8000da8:	791b      	ldrb	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d006      	beq.n	8000dbc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000dae:	78fb      	ldrb	r3, [r7, #3]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	bf0c      	ite	eq
 8000db4:	2301      	moveq	r3, #1
 8000db6:	2300      	movne	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d11a      	bne.n	8000df8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000dc2:	88fa      	ldrh	r2, [r7, #6]
 8000dc4:	88bb      	ldrh	r3, [r7, #4]
 8000dc6:	08db      	lsrs	r3, r3, #3
 8000dc8:	b298      	uxth	r0, r3
 8000dca:	4603      	mov	r3, r0
 8000dcc:	01db      	lsls	r3, r3, #7
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a1c      	ldr	r2, [pc, #112]	; (8000e44 <SSD1306_DrawPixel+0xbc>)
 8000dd2:	5cd3      	ldrb	r3, [r2, r3]
 8000dd4:	b25a      	sxtb	r2, r3
 8000dd6:	88bb      	ldrh	r3, [r7, #4]
 8000dd8:	f003 0307 	and.w	r3, r3, #7
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	b25b      	sxtb	r3, r3
 8000de4:	4313      	orrs	r3, r2
 8000de6:	b259      	sxtb	r1, r3
 8000de8:	88fa      	ldrh	r2, [r7, #6]
 8000dea:	4603      	mov	r3, r0
 8000dec:	01db      	lsls	r3, r3, #7
 8000dee:	4413      	add	r3, r2
 8000df0:	b2c9      	uxtb	r1, r1
 8000df2:	4a14      	ldr	r2, [pc, #80]	; (8000e44 <SSD1306_DrawPixel+0xbc>)
 8000df4:	54d1      	strb	r1, [r2, r3]
 8000df6:	e01d      	b.n	8000e34 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000df8:	88fa      	ldrh	r2, [r7, #6]
 8000dfa:	88bb      	ldrh	r3, [r7, #4]
 8000dfc:	08db      	lsrs	r3, r3, #3
 8000dfe:	b298      	uxth	r0, r3
 8000e00:	4603      	mov	r3, r0
 8000e02:	01db      	lsls	r3, r3, #7
 8000e04:	4413      	add	r3, r2
 8000e06:	4a0f      	ldr	r2, [pc, #60]	; (8000e44 <SSD1306_DrawPixel+0xbc>)
 8000e08:	5cd3      	ldrb	r3, [r2, r3]
 8000e0a:	b25a      	sxtb	r2, r3
 8000e0c:	88bb      	ldrh	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	2101      	movs	r1, #1
 8000e14:	fa01 f303 	lsl.w	r3, r1, r3
 8000e18:	b25b      	sxtb	r3, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	b25b      	sxtb	r3, r3
 8000e1e:	4013      	ands	r3, r2
 8000e20:	b259      	sxtb	r1, r3
 8000e22:	88fa      	ldrh	r2, [r7, #6]
 8000e24:	4603      	mov	r3, r0
 8000e26:	01db      	lsls	r3, r3, #7
 8000e28:	4413      	add	r3, r2
 8000e2a:	b2c9      	uxtb	r1, r1
 8000e2c:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <SSD1306_DrawPixel+0xbc>)
 8000e2e:	54d1      	strb	r1, [r2, r3]
 8000e30:	e000      	b.n	8000e34 <SSD1306_DrawPixel+0xac>
		return;
 8000e32:	bf00      	nop
	}
}
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000494 	.word	0x20000494
 8000e44:	20000094 	.word	0x20000094

08000e48 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	460a      	mov	r2, r1
 8000e52:	80fb      	strh	r3, [r7, #6]
 8000e54:	4613      	mov	r3, r2
 8000e56:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000e58:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <SSD1306_GotoXY+0x28>)
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <SSD1306_GotoXY+0x28>)
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	8053      	strh	r3, [r2, #2]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	20000494 	.word	0x20000494

08000e74 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
 8000e80:	4613      	mov	r3, r2
 8000e82:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000e84:	4b3a      	ldr	r3, [pc, #232]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
	if (
 8000e90:	2b7f      	cmp	r3, #127	; 0x7f
 8000e92:	dc07      	bgt.n	8000ea4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000e94:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000e96:	885b      	ldrh	r3, [r3, #2]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	785b      	ldrb	r3, [r3, #1]
 8000e9e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000ea0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ea2:	dd01      	ble.n	8000ea8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	e05e      	b.n	8000f66 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e04b      	b.n	8000f46 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685a      	ldr	r2, [r3, #4]
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	3b20      	subs	r3, #32
 8000eb6:	6839      	ldr	r1, [r7, #0]
 8000eb8:	7849      	ldrb	r1, [r1, #1]
 8000eba:	fb01 f303 	mul.w	r3, r1, r3
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	440b      	add	r3, r1
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	4413      	add	r3, r2
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	e030      	b.n	8000f34 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d010      	beq.n	8000f04 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000ee2:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000ee4:	881a      	ldrh	r2, [r3, #0]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4413      	add	r3, r2
 8000eec:	b298      	uxth	r0, r3
 8000eee:	4b20      	ldr	r3, [pc, #128]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000ef0:	885a      	ldrh	r2, [r3, #2]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	79ba      	ldrb	r2, [r7, #6]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f7ff ff43 	bl	8000d88 <SSD1306_DrawPixel>
 8000f02:	e014      	b.n	8000f2e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000f04:	4b1a      	ldr	r3, [pc, #104]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000f06:	881a      	ldrh	r2, [r3, #0]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	b298      	uxth	r0, r3
 8000f10:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000f12:	885a      	ldrh	r2, [r3, #2]
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	4413      	add	r3, r2
 8000f1a:	b299      	uxth	r1, r3
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bf0c      	ite	eq
 8000f22:	2301      	moveq	r3, #1
 8000f24:	2300      	movne	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	461a      	mov	r2, r3
 8000f2a:	f7ff ff2d 	bl	8000d88 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	3301      	adds	r3, #1
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d3c8      	bcc.n	8000ed2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	3301      	adds	r3, #1
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	785b      	ldrb	r3, [r3, #1]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d3ad      	bcc.n	8000eae <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000f52:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000f54:	881a      	ldrh	r2, [r3, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b03      	ldr	r3, [pc, #12]	; (8000f70 <SSD1306_Putc+0xfc>)
 8000f62:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000f64:	79fb      	ldrb	r3, [r7, #7]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000494 	.word	0x20000494

08000f74 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000f82:	e012      	b.n	8000faa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	79fa      	ldrb	r2, [r7, #7]
 8000f8a:	68b9      	ldr	r1, [r7, #8]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff71 	bl	8000e74 <SSD1306_Putc>
 8000f92:	4603      	mov	r3, r0
 8000f94:	461a      	mov	r2, r3
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d002      	beq.n	8000fa4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	e008      	b.n	8000fb6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1e8      	bne.n	8000f84 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	781b      	ldrb	r3, [r3, #0]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f7ff fec8 	bl	8000d58 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000fc8:	f7ff fe98 	bl	8000cfc <SSD1306_UpdateScreen>
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <ssd1306_I2C_Init+0x28>)
 8000fd8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fda:	e002      	b.n	8000fe2 <ssd1306_I2C_Init+0x12>
		p--;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f9      	bne.n	8000fdc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	0003d090 	.word	0x0003d090

08000ffc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000ffc:	b590      	push	{r4, r7, lr}
 8000ffe:	b0c5      	sub	sp, #276	; 0x114
 8001000:	af00      	add	r7, sp, #0
 8001002:	4604      	mov	r4, r0
 8001004:	4608      	mov	r0, r1
 8001006:	4639      	mov	r1, r7
 8001008:	600a      	str	r2, [r1, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	4622      	mov	r2, r4
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	1dbb      	adds	r3, r7, #6
 8001014:	4602      	mov	r2, r0
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	460a      	mov	r2, r1
 800101c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800101e:	f107 030c 	add.w	r3, r7, #12
 8001022:	1dba      	adds	r2, r7, #6
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800102e:	e010      	b.n	8001052 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001030:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001034:	463a      	mov	r2, r7
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	441a      	add	r2, r3
 800103a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800103e:	3301      	adds	r3, #1
 8001040:	7811      	ldrb	r1, [r2, #0]
 8001042:	f107 020c 	add.w	r2, r7, #12
 8001046:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001048:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800104c:	3301      	adds	r3, #1
 800104e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001052:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001056:	b29b      	uxth	r3, r3
 8001058:	1d3a      	adds	r2, r7, #4
 800105a:	8812      	ldrh	r2, [r2, #0]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8e7      	bhi.n	8001030 <ssd1306_I2C_WriteMulti+0x34>
//HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
i2c_writeMulti(address, reg, data, count);
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	881b      	ldrh	r3, [r3, #0]
 8001064:	b2dc      	uxtb	r4, r3
 8001066:	463a      	mov	r2, r7
 8001068:	1dbb      	adds	r3, r7, #6
 800106a:	7819      	ldrb	r1, [r3, #0]
 800106c:	1dfb      	adds	r3, r7, #7
 800106e:	7818      	ldrb	r0, [r3, #0]
 8001070:	4623      	mov	r3, r4
 8001072:	6812      	ldr	r2, [r2, #0]
 8001074:	f7ff fb58 	bl	8000728 <i2c_writeMulti>


}
 8001078:	bf00      	nop
 800107a:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800107e:	46bd      	mov	sp, r7
 8001080:	bd90      	pop	{r4, r7, pc}

08001082 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001082:	b580      	push	{r7, lr}
 8001084:	b084      	sub	sp, #16
 8001086:	af00      	add	r7, sp, #0
 8001088:	4603      	mov	r3, r0
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	460b      	mov	r3, r1
 800108e:	71bb      	strb	r3, [r7, #6]
 8001090:	4613      	mov	r3, r2
 8001092:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001094:	79bb      	ldrb	r3, [r7, #6]
 8001096:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001098:	797b      	ldrb	r3, [r7, #5]
 800109a:	737b      	strb	r3, [r7, #13]
 //   HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
    i2c_writeByte(address, reg, data) ;
 800109c:	797a      	ldrb	r2, [r7, #5]
 800109e:	79b9      	ldrb	r1, [r7, #6]
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fb22 	bl	80006ec <i2c_writeByte>
//		while(!(I2C1->SR1&I2C_SR1_TXE)){};       /*wait until data register empty*/
//		I2C1->DR = data;
//		while (!(I2C1->SR1 & I2C_SR1_BTF));      /*wait until transfer finished*/
//		I2C1->CR1 |=I2C_CR1_STOP;								 /*Generate Stop*/
//
}
 80010a8:	bf00      	nop
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_MspInit+0x4c>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	4a0f      	ldr	r2, [pc, #60]	; (80010fc <HAL_MspInit+0x4c>)
 80010c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c4:	6453      	str	r3, [r2, #68]	; 0x44
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_MspInit+0x4c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_MspInit+0x4c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <HAL_MspInit+0x4c>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	6413      	str	r3, [r2, #64]	; 0x40
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_MspInit+0x4c>)
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010ee:	2007      	movs	r0, #7
 80010f0:	f000 fa63 	bl	80015ba <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08a      	sub	sp, #40	; 0x28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a19      	ldr	r2, [pc, #100]	; (8001184 <HAL_I2C_MspInit+0x84>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d12c      	bne.n	800117c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	4b18      	ldr	r3, [pc, #96]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a17      	ldr	r2, [pc, #92]	; (8001188 <HAL_I2C_MspInit+0x88>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800113e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001144:	2312      	movs	r3, #18
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001150:	2304      	movs	r3, #4
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	480c      	ldr	r0, [pc, #48]	; (800118c <HAL_I2C_MspInit+0x8c>)
 800115c:	f000 fa62 	bl	8001624 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_I2C_MspInit+0x88>)
 800116a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800116e:	6413      	str	r3, [r2, #64]	; 0x40
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <HAL_I2C_MspInit+0x88>)
 8001172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40005400 	.word	0x40005400
 8001188:	40023800 	.word	0x40023800
 800118c:	40020400 	.word	0x40020400

08001190 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08c      	sub	sp, #48	; 0x30
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	2019      	movs	r0, #25
 80011a6:	f000 fa13 	bl	80015d0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011aa:	2019      	movs	r0, #25
 80011ac:	f000 fa2c 	bl	8001608 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <HAL_InitTick+0xa4>)
 80011b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b8:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <HAL_InitTick+0xa4>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6453      	str	r3, [r2, #68]	; 0x44
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <HAL_InitTick+0xa4>)
 80011c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011cc:	f107 0210 	add.w	r2, r7, #16
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f001 fa04 	bl	80025e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011dc:	f001 f9ee 	bl	80025bc <HAL_RCC_GetPCLK2Freq>
 80011e0:	4603      	mov	r3, r0
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e8:	4a13      	ldr	r2, [pc, #76]	; (8001238 <HAL_InitTick+0xa8>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	0c9b      	lsrs	r3, r3, #18
 80011f0:	3b01      	subs	r3, #1
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_InitTick+0xac>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <HAL_InitTick+0xb0>)
 80011f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <HAL_InitTick+0xac>)
 80011fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001200:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_InitTick+0xac>)
 8001204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001206:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_InitTick+0xac>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_InitTick+0xac>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001214:	4809      	ldr	r0, [pc, #36]	; (800123c <HAL_InitTick+0xac>)
 8001216:	f001 fa17 	bl	8002648 <HAL_TIM_Base_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d104      	bne.n	800122a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001220:	4806      	ldr	r0, [pc, #24]	; (800123c <HAL_InitTick+0xac>)
 8001222:	f001 fa6b 	bl	80026fc <HAL_TIM_Base_Start_IT>
 8001226:	4603      	mov	r3, r0
 8001228:	e000      	b.n	800122c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3730      	adds	r7, #48	; 0x30
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	431bde83 	.word	0x431bde83
 800123c:	2000050c 	.word	0x2000050c
 8001240:	40010000 	.word	0x40010000

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <NMI_Handler+0x4>

0800124a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <MemManage_Handler+0x4>

08001256 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <UsageFault_Handler+0x4>

08001262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012a2:	f001 fa9b 	bl	80027dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000050c 	.word	0x2000050c

080012b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b8:	4a14      	ldr	r2, [pc, #80]	; (800130c <_sbrk+0x5c>)
 80012ba:	4b15      	ldr	r3, [pc, #84]	; (8001310 <_sbrk+0x60>)
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c4:	4b13      	ldr	r3, [pc, #76]	; (8001314 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012cc:	4b11      	ldr	r3, [pc, #68]	; (8001314 <_sbrk+0x64>)
 80012ce:	4a12      	ldr	r2, [pc, #72]	; (8001318 <_sbrk+0x68>)
 80012d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d2:	4b10      	ldr	r3, [pc, #64]	; (8001314 <_sbrk+0x64>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4413      	add	r3, r2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d207      	bcs.n	80012f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e0:	f001 fc60 	bl	8002ba4 <__errno>
 80012e4:	4603      	mov	r3, r0
 80012e6:	220c      	movs	r2, #12
 80012e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	e009      	b.n	8001304 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f6:	4b07      	ldr	r3, [pc, #28]	; (8001314 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	4a05      	ldr	r2, [pc, #20]	; (8001314 <_sbrk+0x64>)
 8001300:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001302:	68fb      	ldr	r3, [r7, #12]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3718      	adds	r7, #24
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	20030000 	.word	0x20030000
 8001310:	00000400 	.word	0x00000400
 8001314:	2000049c 	.word	0x2000049c
 8001318:	20000568 	.word	0x20000568

0800131c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <SystemInit+0x20>)
 8001322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <SystemInit+0x20>)
 8001328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800132c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001344:	480d      	ldr	r0, [pc, #52]	; (800137c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001346:	490e      	ldr	r1, [pc, #56]	; (8001380 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001348:	4a0e      	ldr	r2, [pc, #56]	; (8001384 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800134c:	e002      	b.n	8001354 <LoopCopyDataInit>

0800134e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800134e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001352:	3304      	adds	r3, #4

08001354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001358:	d3f9      	bcc.n	800134e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800135c:	4c0b      	ldr	r4, [pc, #44]	; (800138c <LoopFillZerobss+0x26>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001360:	e001      	b.n	8001366 <LoopFillZerobss>

08001362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001364:	3204      	adds	r2, #4

08001366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001368:	d3fb      	bcc.n	8001362 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800136a:	f7ff ffd7 	bl	800131c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800136e:	f001 fc1f 	bl	8002bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001372:	f7ff faa7 	bl	80008c4 <main>
  bx  lr    
 8001376:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001378:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800137c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001380:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001384:	08004330 	.word	0x08004330
  ldr r2, =_sbss
 8001388:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800138c:	20000568 	.word	0x20000568

08001390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001390:	e7fe      	b.n	8001390 <ADC_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <HAL_Init+0x40>)
 800139e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_Init+0x40>)
 80013aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_Init+0x40>)
 80013b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 f8fc 	bl	80015ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f7ff fee4 	bl	8001190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c8:	f7ff fe72 	bl	80010b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023c00 	.word	0x40023c00

080013d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x20>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_IncTick+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <HAL_IncTick+0x24>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000010 	.word	0x20000010
 80013fc:	20000554 	.word	0x20000554

08001400 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return uwTick;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_GetTick+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000554 	.word	0x20000554

08001418 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001420:	f7ff ffee 	bl	8001400 <HAL_GetTick>
 8001424:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001430:	d005      	beq.n	800143e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_Delay+0x44>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	461a      	mov	r2, r3
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	4413      	add	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800143e:	bf00      	nop
 8001440:	f7ff ffde 	bl	8001400 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	429a      	cmp	r2, r3
 800144e:	d8f7      	bhi.n	8001440 <HAL_Delay+0x28>
  {
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000010 	.word	0x20000010

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4907      	ldr	r1, [pc, #28]	; (80014fc <__NVIC_EnableIRQ+0x38>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100

08001500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0a      	blt.n	800152a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <__NVIC_SetPriority+0x4c>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001528:	e00a      	b.n	8001540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <__NVIC_SetPriority+0x50>)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3b04      	subs	r3, #4
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	440b      	add	r3, r1
 800153e:	761a      	strb	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f1c3 0307 	rsb	r3, r3, #7
 800156e:	2b04      	cmp	r3, #4
 8001570:	bf28      	it	cs
 8001572:	2304      	movcs	r3, #4
 8001574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3304      	adds	r3, #4
 800157a:	2b06      	cmp	r3, #6
 800157c:	d902      	bls.n	8001584 <NVIC_EncodePriority+0x30>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3b03      	subs	r3, #3
 8001582:	e000      	b.n	8001586 <NVIC_EncodePriority+0x32>
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	401a      	ands	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	4313      	orrs	r3, r2
         );
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff4c 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	60b9      	str	r1, [r7, #8]
 80015da:	607a      	str	r2, [r7, #4]
 80015dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e2:	f7ff ff61 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 80015e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	68b9      	ldr	r1, [r7, #8]
 80015ec:	6978      	ldr	r0, [r7, #20]
 80015ee:	f7ff ffb1 	bl	8001554 <NVIC_EncodePriority>
 80015f2:	4602      	mov	r2, r0
 80015f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff80 	bl	8001500 <__NVIC_SetPriority>
}
 8001600:	bf00      	nop
 8001602:	3718      	adds	r7, #24
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff ff54 	bl	80014c4 <__NVIC_EnableIRQ>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b089      	sub	sp, #36	; 0x24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	e177      	b.n	8001930 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001640:	2201      	movs	r2, #1
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	4013      	ands	r3, r2
 8001652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 8166 	bne.w	800192a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	2b01      	cmp	r3, #1
 8001668:	d005      	beq.n	8001676 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001672:	2b02      	cmp	r3, #2
 8001674:	d130      	bne.n	80016d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	2203      	movs	r2, #3
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43db      	mvns	r3, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4013      	ands	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016ac:	2201      	movs	r2, #1
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43db      	mvns	r3, r3
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	4013      	ands	r3, r2
 80016ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	091b      	lsrs	r3, r3, #4
 80016c2:	f003 0201 	and.w	r2, r3, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d017      	beq.n	8001714 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	2b02      	cmp	r3, #2
 800171e:	d123      	bne.n	8001768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	08da      	lsrs	r2, r3, #3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3208      	adds	r2, #8
 8001728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	f003 0307 	and.w	r3, r3, #7
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	220f      	movs	r2, #15
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	69ba      	ldr	r2, [r7, #24]
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4313      	orrs	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	08da      	lsrs	r2, r3, #3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	3208      	adds	r2, #8
 8001762:	69b9      	ldr	r1, [r7, #24]
 8001764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	2203      	movs	r2, #3
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0203 	and.w	r2, r3, #3
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	f000 80c0 	beq.w	800192a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b66      	ldr	r3, [pc, #408]	; (8001948 <HAL_GPIO_Init+0x324>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	4a65      	ldr	r2, [pc, #404]	; (8001948 <HAL_GPIO_Init+0x324>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ba:	4b63      	ldr	r3, [pc, #396]	; (8001948 <HAL_GPIO_Init+0x324>)
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017c6:	4a61      	ldr	r2, [pc, #388]	; (800194c <HAL_GPIO_Init+0x328>)
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	089b      	lsrs	r3, r3, #2
 80017cc:	3302      	adds	r3, #2
 80017ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4013      	ands	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a58      	ldr	r2, [pc, #352]	; (8001950 <HAL_GPIO_Init+0x32c>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d037      	beq.n	8001862 <HAL_GPIO_Init+0x23e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a57      	ldr	r2, [pc, #348]	; (8001954 <HAL_GPIO_Init+0x330>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d031      	beq.n	800185e <HAL_GPIO_Init+0x23a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a56      	ldr	r2, [pc, #344]	; (8001958 <HAL_GPIO_Init+0x334>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d02b      	beq.n	800185a <HAL_GPIO_Init+0x236>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a55      	ldr	r2, [pc, #340]	; (800195c <HAL_GPIO_Init+0x338>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d025      	beq.n	8001856 <HAL_GPIO_Init+0x232>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a54      	ldr	r2, [pc, #336]	; (8001960 <HAL_GPIO_Init+0x33c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d01f      	beq.n	8001852 <HAL_GPIO_Init+0x22e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a53      	ldr	r2, [pc, #332]	; (8001964 <HAL_GPIO_Init+0x340>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d019      	beq.n	800184e <HAL_GPIO_Init+0x22a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_GPIO_Init+0x344>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d013      	beq.n	800184a <HAL_GPIO_Init+0x226>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a51      	ldr	r2, [pc, #324]	; (800196c <HAL_GPIO_Init+0x348>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d00d      	beq.n	8001846 <HAL_GPIO_Init+0x222>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a50      	ldr	r2, [pc, #320]	; (8001970 <HAL_GPIO_Init+0x34c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d007      	beq.n	8001842 <HAL_GPIO_Init+0x21e>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4f      	ldr	r2, [pc, #316]	; (8001974 <HAL_GPIO_Init+0x350>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d101      	bne.n	800183e <HAL_GPIO_Init+0x21a>
 800183a:	2309      	movs	r3, #9
 800183c:	e012      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800183e:	230a      	movs	r3, #10
 8001840:	e010      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001842:	2308      	movs	r3, #8
 8001844:	e00e      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001846:	2307      	movs	r3, #7
 8001848:	e00c      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800184a:	2306      	movs	r3, #6
 800184c:	e00a      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800184e:	2305      	movs	r3, #5
 8001850:	e008      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001852:	2304      	movs	r3, #4
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001856:	2303      	movs	r3, #3
 8001858:	e004      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800185a:	2302      	movs	r3, #2
 800185c:	e002      	b.n	8001864 <HAL_GPIO_Init+0x240>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x240>
 8001862:	2300      	movs	r3, #0
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f002 0203 	and.w	r2, r2, #3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4093      	lsls	r3, r2
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001874:	4935      	ldr	r1, [pc, #212]	; (800194c <HAL_GPIO_Init+0x328>)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001882:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <HAL_GPIO_Init+0x354>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018a6:	4a34      	ldr	r2, [pc, #208]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018ac:	4b32      	ldr	r3, [pc, #200]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018d0:	4a29      	ldr	r2, [pc, #164]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018d6:	4b28      	ldr	r3, [pc, #160]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018fa:	4a1f      	ldr	r2, [pc, #124]	; (8001978 <HAL_GPIO_Init+0x354>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001900:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <HAL_GPIO_Init+0x354>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001924:	4a14      	ldr	r2, [pc, #80]	; (8001978 <HAL_GPIO_Init+0x354>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3301      	adds	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	f67f ae84 	bls.w	8001640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40013800 	.word	0x40013800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800
 800195c:	40020c00 	.word	0x40020c00
 8001960:	40021000 	.word	0x40021000
 8001964:	40021400 	.word	0x40021400
 8001968:	40021800 	.word	0x40021800
 800196c:	40021c00 	.word	0x40021c00
 8001970:	40022000 	.word	0x40022000
 8001974:	40022400 	.word	0x40022400
 8001978:	40013c00 	.word	0x40013c00

0800197c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e12b      	b.n	8001be6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d106      	bne.n	80019a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff fbac 	bl	8001100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2224      	movs	r2, #36	; 0x24
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0201 	bic.w	r2, r2, #1
 80019be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80019ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80019e0:	f000 fdd8 	bl	8002594 <HAL_RCC_GetPCLK1Freq>
 80019e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	4a81      	ldr	r2, [pc, #516]	; (8001bf0 <HAL_I2C_Init+0x274>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d807      	bhi.n	8001a00 <HAL_I2C_Init+0x84>
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4a80      	ldr	r2, [pc, #512]	; (8001bf4 <HAL_I2C_Init+0x278>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	bf94      	ite	ls
 80019f8:	2301      	movls	r3, #1
 80019fa:	2300      	movhi	r3, #0
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	e006      	b.n	8001a0e <HAL_I2C_Init+0x92>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4a7d      	ldr	r2, [pc, #500]	; (8001bf8 <HAL_I2C_Init+0x27c>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	bf94      	ite	ls
 8001a08:	2301      	movls	r3, #1
 8001a0a:	2300      	movhi	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e0e7      	b.n	8001be6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4a78      	ldr	r2, [pc, #480]	; (8001bfc <HAL_I2C_Init+0x280>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	0c9b      	lsrs	r3, r3, #18
 8001a20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	4a6a      	ldr	r2, [pc, #424]	; (8001bf0 <HAL_I2C_Init+0x274>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d802      	bhi.n	8001a50 <HAL_I2C_Init+0xd4>
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	e009      	b.n	8001a64 <HAL_I2C_Init+0xe8>
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a56:	fb02 f303 	mul.w	r3, r2, r3
 8001a5a:	4a69      	ldr	r2, [pc, #420]	; (8001c00 <HAL_I2C_Init+0x284>)
 8001a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a60:	099b      	lsrs	r3, r3, #6
 8001a62:	3301      	adds	r3, #1
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	430b      	orrs	r3, r1
 8001a6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	69db      	ldr	r3, [r3, #28]
 8001a72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001a76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	495c      	ldr	r1, [pc, #368]	; (8001bf0 <HAL_I2C_Init+0x274>)
 8001a80:	428b      	cmp	r3, r1
 8001a82:	d819      	bhi.n	8001ab8 <HAL_I2C_Init+0x13c>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1e59      	subs	r1, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a92:	1c59      	adds	r1, r3, #1
 8001a94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001a98:	400b      	ands	r3, r1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d00a      	beq.n	8001ab4 <HAL_I2C_Init+0x138>
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1e59      	subs	r1, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aac:	3301      	adds	r3, #1
 8001aae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ab2:	e051      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001ab4:	2304      	movs	r3, #4
 8001ab6:	e04f      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d111      	bne.n	8001ae4 <HAL_I2C_Init+0x168>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1e58      	subs	r0, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	440b      	add	r3, r1
 8001ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	e012      	b.n	8001b0a <HAL_I2C_Init+0x18e>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	1e58      	subs	r0, r3, #1
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6859      	ldr	r1, [r3, #4]
 8001aec:	460b      	mov	r3, r1
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	440b      	add	r3, r1
 8001af2:	0099      	lsls	r1, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001afa:	3301      	adds	r3, #1
 8001afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	bf0c      	ite	eq
 8001b04:	2301      	moveq	r3, #1
 8001b06:	2300      	movne	r3, #0
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <HAL_I2C_Init+0x196>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e022      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10e      	bne.n	8001b38 <HAL_I2C_Init+0x1bc>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	1e58      	subs	r0, r3, #1
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6859      	ldr	r1, [r3, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	440b      	add	r3, r1
 8001b28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b36:	e00f      	b.n	8001b58 <HAL_I2C_Init+0x1dc>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1e58      	subs	r0, r3, #1
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6859      	ldr	r1, [r3, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	0099      	lsls	r1, r3, #2
 8001b48:	440b      	add	r3, r1
 8001b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	6809      	ldr	r1, [r1, #0]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	69da      	ldr	r2, [r3, #28]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001b86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	6911      	ldr	r1, [r2, #16]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	68d2      	ldr	r2, [r2, #12]
 8001b92:	4311      	orrs	r1, r2
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	430b      	orrs	r3, r1
 8001b9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	695a      	ldr	r2, [r3, #20]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f042 0201 	orr.w	r2, r2, #1
 8001bc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	000186a0 	.word	0x000186a0
 8001bf4:	001e847f 	.word	0x001e847f
 8001bf8:	003d08ff 	.word	0x003d08ff
 8001bfc:	431bde83 	.word	0x431bde83
 8001c00:	10624dd3 	.word	0x10624dd3

08001c04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	d129      	bne.n	8001c6e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2224      	movs	r2, #36	; 0x24
 8001c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0201 	bic.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0210 	bic.w	r2, r2, #16
 8001c40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f042 0201 	orr.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2220      	movs	r2, #32
 8001c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e000      	b.n	8001c70 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8001c6e:	2302      	movs	r3, #2
  }
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b20      	cmp	r3, #32
 8001c94:	d12a      	bne.n	8001cec <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2224      	movs	r2, #36	; 0x24
 8001c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0201 	bic.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8001cb6:	89fb      	ldrh	r3, [r7, #14]
 8001cb8:	f023 030f 	bic.w	r3, r3, #15
 8001cbc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	89fb      	ldrh	r3, [r7, #14]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	89fa      	ldrh	r2, [r7, #14]
 8001cce:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e000      	b.n	8001cee <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8001cec:	2302      	movs	r3, #2
  }
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e264      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d075      	beq.n	8001e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d1a:	4ba3      	ldr	r3, [pc, #652]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d00c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d26:	4ba0      	ldr	r3, [pc, #640]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d112      	bne.n	8001d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d32:	4b9d      	ldr	r3, [pc, #628]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d3e:	d10b      	bne.n	8001d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	4b99      	ldr	r3, [pc, #612]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d05b      	beq.n	8001e04 <HAL_RCC_OscConfig+0x108>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d157      	bne.n	8001e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e23f      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d60:	d106      	bne.n	8001d70 <HAL_RCC_OscConfig+0x74>
 8001d62:	4b91      	ldr	r3, [pc, #580]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a90      	ldr	r2, [pc, #576]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e01d      	b.n	8001dac <HAL_RCC_OscConfig+0xb0>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x98>
 8001d7a:	4b8b      	ldr	r3, [pc, #556]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a8a      	ldr	r2, [pc, #552]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	4b88      	ldr	r3, [pc, #544]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a87      	ldr	r2, [pc, #540]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e00b      	b.n	8001dac <HAL_RCC_OscConfig+0xb0>
 8001d94:	4b84      	ldr	r3, [pc, #528]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a83      	ldr	r2, [pc, #524]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b81      	ldr	r3, [pc, #516]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a80      	ldr	r2, [pc, #512]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d013      	beq.n	8001ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff fb24 	bl	8001400 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff fb20 	bl	8001400 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	; 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e204      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b76      	ldr	r3, [pc, #472]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0xc0>
 8001dda:	e014      	b.n	8001e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fb10 	bl	8001400 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de4:	f7ff fb0c 	bl	8001400 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e1f0      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df6:	4b6c      	ldr	r3, [pc, #432]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0xe8>
 8001e02:	e000      	b.n	8001e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d063      	beq.n	8001eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e12:	4b65      	ldr	r3, [pc, #404]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00b      	beq.n	8001e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1e:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d11c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2a:	4b5f      	ldr	r3, [pc, #380]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d116      	bne.n	8001e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e36:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_RCC_OscConfig+0x152>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e1c4      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4e:	4b56      	ldr	r3, [pc, #344]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4952      	ldr	r1, [pc, #328]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e62:	e03a      	b.n	8001eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d020      	beq.n	8001eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e6c:	4b4f      	ldr	r3, [pc, #316]	; (8001fac <HAL_RCC_OscConfig+0x2b0>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	f7ff fac5 	bl	8001400 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e7a:	f7ff fac1 	bl	8001400 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e1a5      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e98:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4940      	ldr	r1, [pc, #256]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]
 8001eac:	e015      	b.n	8001eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eae:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <HAL_RCC_OscConfig+0x2b0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff faa4 	bl	8001400 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ebc:	f7ff faa0 	bl	8001400 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e184      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d030      	beq.n	8001f48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d016      	beq.n	8001f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eee:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <HAL_RCC_OscConfig+0x2b4>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7ff fa84 	bl	8001400 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efc:	f7ff fa80 	bl	8001400 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e164      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0e:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x200>
 8001f1a:	e015      	b.n	8001f48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1c:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <HAL_RCC_OscConfig+0x2b4>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f22:	f7ff fa6d 	bl	8001400 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fa69 	bl	8001400 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e14d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80a0 	beq.w	8002096 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10f      	bne.n	8001f86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a0e      	ldr	r2, [pc, #56]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f82:	2301      	movs	r3, #1
 8001f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_OscConfig+0x2b8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d121      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <HAL_RCC_OscConfig+0x2b8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <HAL_RCC_OscConfig+0x2b8>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9e:	f7ff fa2f 	bl	8001400 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	e011      	b.n	8001fca <HAL_RCC_OscConfig+0x2ce>
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	42470000 	.word	0x42470000
 8001fb0:	42470e80 	.word	0x42470e80
 8001fb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb8:	f7ff fa22 	bl	8001400 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e106      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fca:	4b85      	ldr	r3, [pc, #532]	; (80021e0 <HAL_RCC_OscConfig+0x4e4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d106      	bne.n	8001fec <HAL_RCC_OscConfig+0x2f0>
 8001fde:	4b81      	ldr	r3, [pc, #516]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8001fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe2:	4a80      	ldr	r2, [pc, #512]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8001fe4:	f043 0301 	orr.w	r3, r3, #1
 8001fe8:	6713      	str	r3, [r2, #112]	; 0x70
 8001fea:	e01c      	b.n	8002026 <HAL_RCC_OscConfig+0x32a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b05      	cmp	r3, #5
 8001ff2:	d10c      	bne.n	800200e <HAL_RCC_OscConfig+0x312>
 8001ff4:	4b7b      	ldr	r3, [pc, #492]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8001ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff8:	4a7a      	ldr	r2, [pc, #488]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6713      	str	r3, [r2, #112]	; 0x70
 8002000:	4b78      	ldr	r3, [pc, #480]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002004:	4a77      	ldr	r2, [pc, #476]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002006:	f043 0301 	orr.w	r3, r3, #1
 800200a:	6713      	str	r3, [r2, #112]	; 0x70
 800200c:	e00b      	b.n	8002026 <HAL_RCC_OscConfig+0x32a>
 800200e:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	4a74      	ldr	r2, [pc, #464]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	6713      	str	r3, [r2, #112]	; 0x70
 800201a:	4b72      	ldr	r3, [pc, #456]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	4a71      	ldr	r2, [pc, #452]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002020:	f023 0304 	bic.w	r3, r3, #4
 8002024:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d015      	beq.n	800205a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202e:	f7ff f9e7 	bl	8001400 <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002034:	e00a      	b.n	800204c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7ff f9e3 	bl	8001400 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f241 3288 	movw	r2, #5000	; 0x1388
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e0c5      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800204c:	4b65      	ldr	r3, [pc, #404]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0ee      	beq.n	8002036 <HAL_RCC_OscConfig+0x33a>
 8002058:	e014      	b.n	8002084 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205a:	f7ff f9d1 	bl	8001400 <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002060:	e00a      	b.n	8002078 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7ff f9cd 	bl	8001400 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002070:	4293      	cmp	r3, r2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0af      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002078:	4b5a      	ldr	r3, [pc, #360]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 800207a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ee      	bne.n	8002062 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d105      	bne.n	8002096 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800208a:	4b56      	ldr	r3, [pc, #344]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a55      	ldr	r2, [pc, #340]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f000 809b 	beq.w	80021d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020a0:	4b50      	ldr	r3, [pc, #320]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d05c      	beq.n	8002166 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d141      	bne.n	8002138 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020b4:	4b4c      	ldr	r3, [pc, #304]	; (80021e8 <HAL_RCC_OscConfig+0x4ec>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ba:	f7ff f9a1 	bl	8001400 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020c2:	f7ff f99d 	bl	8001400 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e081      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d4:	4b43      	ldr	r3, [pc, #268]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1f0      	bne.n	80020c2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69da      	ldr	r2, [r3, #28]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	019b      	lsls	r3, r3, #6
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	3b01      	subs	r3, #1
 80020fa:	041b      	lsls	r3, r3, #16
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002102:	061b      	lsls	r3, r3, #24
 8002104:	4937      	ldr	r1, [pc, #220]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800210a:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <HAL_RCC_OscConfig+0x4ec>)
 800210c:	2201      	movs	r2, #1
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff f976 	bl	8001400 <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff f972 	bl	8001400 <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e056      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800212a:	4b2e      	ldr	r3, [pc, #184]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0f0      	beq.n	8002118 <HAL_RCC_OscConfig+0x41c>
 8002136:	e04e      	b.n	80021d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002138:	4b2b      	ldr	r3, [pc, #172]	; (80021e8 <HAL_RCC_OscConfig+0x4ec>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213e:	f7ff f95f 	bl	8001400 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002144:	e008      	b.n	8002158 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002146:	f7ff f95b 	bl	8001400 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b02      	cmp	r3, #2
 8002152:	d901      	bls.n	8002158 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e03f      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002158:	4b22      	ldr	r3, [pc, #136]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1f0      	bne.n	8002146 <HAL_RCC_OscConfig+0x44a>
 8002164:	e037      	b.n	80021d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d101      	bne.n	8002172 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e032      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <HAL_RCC_OscConfig+0x4e8>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d028      	beq.n	80021d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d121      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002198:	429a      	cmp	r2, r3
 800219a:	d11a      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021a2:	4013      	ands	r3, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d111      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b8:	085b      	lsrs	r3, r3, #1
 80021ba:	3b01      	subs	r3, #1
 80021bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d107      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3718      	adds	r7, #24
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40007000 	.word	0x40007000
 80021e4:	40023800 	.word	0x40023800
 80021e8:	42470060 	.word	0x42470060

080021ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0cc      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b68      	ldr	r3, [pc, #416]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d90c      	bls.n	8002228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b65      	ldr	r3, [pc, #404]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800224a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d044      	beq.n	800230c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d119      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	4b3f      	ldr	r3, [pc, #252]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e06f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e067      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ca:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 0203 	bic.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4934      	ldr	r1, [pc, #208]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022dc:	f7ff f890 	bl	8001400 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7ff f88c 	bl	8001400 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e04f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 020c 	and.w	r2, r3, #12
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	429a      	cmp	r2, r3
 800230a:	d1eb      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d20c      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fefc 	bl	8001190 <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00
 80023a8:	40023800 	.word	0x40023800
 80023ac:	080042b0 	.word	0x080042b0
 80023b0:	20000008 	.word	0x20000008
 80023b4:	2000000c 	.word	0x2000000c

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023bc:	b084      	sub	sp, #16
 80023be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	2300      	movs	r3, #0
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	2300      	movs	r3, #0
 80023ca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d0:	4b67      	ldr	r3, [pc, #412]	; (8002570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d00d      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x40>
 80023dc:	2b08      	cmp	r3, #8
 80023de:	f200 80bd 	bhi.w	800255c <HAL_RCC_GetSysClockFreq+0x1a4>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x34>
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ea:	e0b7      	b.n	800255c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b61      	ldr	r3, [pc, #388]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80023ee:	60bb      	str	r3, [r7, #8]
       break;
 80023f0:	e0b7      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f2:	4b61      	ldr	r3, [pc, #388]	; (8002578 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80023f4:	60bb      	str	r3, [r7, #8]
      break;
 80023f6:	e0b4      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f8:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002400:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002402:	4b5b      	ldr	r3, [pc, #364]	; (8002570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d04d      	beq.n	80024aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240e:	4b58      	ldr	r3, [pc, #352]	; (8002570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	099b      	lsrs	r3, r3, #6
 8002414:	461a      	mov	r2, r3
 8002416:	f04f 0300 	mov.w	r3, #0
 800241a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800241e:	f04f 0100 	mov.w	r1, #0
 8002422:	ea02 0800 	and.w	r8, r2, r0
 8002426:	ea03 0901 	and.w	r9, r3, r1
 800242a:	4640      	mov	r0, r8
 800242c:	4649      	mov	r1, r9
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	014b      	lsls	r3, r1, #5
 8002438:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800243c:	0142      	lsls	r2, r0, #5
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	ebb0 0008 	subs.w	r0, r0, r8
 8002446:	eb61 0109 	sbc.w	r1, r1, r9
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	018b      	lsls	r3, r1, #6
 8002454:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002458:	0182      	lsls	r2, r0, #6
 800245a:	1a12      	subs	r2, r2, r0
 800245c:	eb63 0301 	sbc.w	r3, r3, r1
 8002460:	f04f 0000 	mov.w	r0, #0
 8002464:	f04f 0100 	mov.w	r1, #0
 8002468:	00d9      	lsls	r1, r3, #3
 800246a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800246e:	00d0      	lsls	r0, r2, #3
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	eb12 0208 	adds.w	r2, r2, r8
 8002478:	eb43 0309 	adc.w	r3, r3, r9
 800247c:	f04f 0000 	mov.w	r0, #0
 8002480:	f04f 0100 	mov.w	r1, #0
 8002484:	0259      	lsls	r1, r3, #9
 8002486:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800248a:	0250      	lsls	r0, r2, #9
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4610      	mov	r0, r2
 8002492:	4619      	mov	r1, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	461a      	mov	r2, r3
 8002498:	f04f 0300 	mov.w	r3, #0
 800249c:	f7fd fef8 	bl	8000290 <__aeabi_uldivmod>
 80024a0:	4602      	mov	r2, r0
 80024a2:	460b      	mov	r3, r1
 80024a4:	4613      	mov	r3, r2
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	e04a      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024aa:	4b31      	ldr	r3, [pc, #196]	; (8002570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	099b      	lsrs	r3, r3, #6
 80024b0:	461a      	mov	r2, r3
 80024b2:	f04f 0300 	mov.w	r3, #0
 80024b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80024ba:	f04f 0100 	mov.w	r1, #0
 80024be:	ea02 0400 	and.w	r4, r2, r0
 80024c2:	ea03 0501 	and.w	r5, r3, r1
 80024c6:	4620      	mov	r0, r4
 80024c8:	4629      	mov	r1, r5
 80024ca:	f04f 0200 	mov.w	r2, #0
 80024ce:	f04f 0300 	mov.w	r3, #0
 80024d2:	014b      	lsls	r3, r1, #5
 80024d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024d8:	0142      	lsls	r2, r0, #5
 80024da:	4610      	mov	r0, r2
 80024dc:	4619      	mov	r1, r3
 80024de:	1b00      	subs	r0, r0, r4
 80024e0:	eb61 0105 	sbc.w	r1, r1, r5
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	018b      	lsls	r3, r1, #6
 80024ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024f2:	0182      	lsls	r2, r0, #6
 80024f4:	1a12      	subs	r2, r2, r0
 80024f6:	eb63 0301 	sbc.w	r3, r3, r1
 80024fa:	f04f 0000 	mov.w	r0, #0
 80024fe:	f04f 0100 	mov.w	r1, #0
 8002502:	00d9      	lsls	r1, r3, #3
 8002504:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002508:	00d0      	lsls	r0, r2, #3
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	1912      	adds	r2, r2, r4
 8002510:	eb45 0303 	adc.w	r3, r5, r3
 8002514:	f04f 0000 	mov.w	r0, #0
 8002518:	f04f 0100 	mov.w	r1, #0
 800251c:	0299      	lsls	r1, r3, #10
 800251e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002522:	0290      	lsls	r0, r2, #10
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	461a      	mov	r2, r3
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	f7fd feac 	bl	8000290 <__aeabi_uldivmod>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4613      	mov	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	0c1b      	lsrs	r3, r3, #16
 8002546:	f003 0303 	and.w	r3, r3, #3
 800254a:	3301      	adds	r3, #1
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	fbb2 f3f3 	udiv	r3, r2, r3
 8002558:	60bb      	str	r3, [r7, #8]
      break;
 800255a:	e002      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800255e:	60bb      	str	r3, [r7, #8]
      break;
 8002560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002562:	68bb      	ldr	r3, [r7, #8]
}
 8002564:	4618      	mov	r0, r3
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	00f42400 	.word	0x00f42400
 8002578:	007a1200 	.word	0x007a1200

0800257c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002580:	4b03      	ldr	r3, [pc, #12]	; (8002590 <HAL_RCC_GetHCLKFreq+0x14>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000008 	.word	0x20000008

08002594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002598:	f7ff fff0 	bl	800257c <HAL_RCC_GetHCLKFreq>
 800259c:	4602      	mov	r2, r0
 800259e:	4b05      	ldr	r3, [pc, #20]	; (80025b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	0a9b      	lsrs	r3, r3, #10
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	4903      	ldr	r1, [pc, #12]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025aa:	5ccb      	ldrb	r3, [r1, r3]
 80025ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40023800 	.word	0x40023800
 80025b8:	080042c0 	.word	0x080042c0

080025bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80025c0:	f7ff ffdc 	bl	800257c <HAL_RCC_GetHCLKFreq>
 80025c4:	4602      	mov	r2, r0
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	0b5b      	lsrs	r3, r3, #13
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4903      	ldr	r1, [pc, #12]	; (80025e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d2:	5ccb      	ldrb	r3, [r1, r3]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40023800 	.word	0x40023800
 80025e0:	080042c0 	.word	0x080042c0

080025e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	220f      	movs	r2, #15
 80025f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_RCC_GetClockConfig+0x5c>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 0203 	and.w	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_RCC_GetClockConfig+0x5c>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_RCC_GetClockConfig+0x5c>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_GetClockConfig+0x5c>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	08db      	lsrs	r3, r3, #3
 800261e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002626:	4b07      	ldr	r3, [pc, #28]	; (8002644 <HAL_RCC_GetClockConfig+0x60>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f003 020f 	and.w	r2, r3, #15
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	601a      	str	r2, [r3, #0]
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	40023800 	.word	0x40023800
 8002644:	40023c00 	.word	0x40023c00

08002648 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e041      	b.n	80026de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f839 	bl	80026e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2202      	movs	r2, #2
 8002678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3304      	adds	r3, #4
 8002684:	4619      	mov	r1, r3
 8002686:	4610      	mov	r0, r2
 8002688:	f000 f9d8 	bl	8002a3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2201      	movs	r2, #1
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026e6:	b480      	push	{r7}
 80026e8:	b083      	sub	sp, #12
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b01      	cmp	r3, #1
 800270e:	d001      	beq.n	8002714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e04e      	b.n	80027b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a23      	ldr	r2, [pc, #140]	; (80027c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d022      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x80>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273e:	d01d      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x80>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a1f      	ldr	r2, [pc, #124]	; (80027c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d018      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x80>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a1e      	ldr	r2, [pc, #120]	; (80027c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d013      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x80>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a1c      	ldr	r2, [pc, #112]	; (80027cc <HAL_TIM_Base_Start_IT+0xd0>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d00e      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x80>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d009      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x80>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a19      	ldr	r2, [pc, #100]	; (80027d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d004      	beq.n	800277c <HAL_TIM_Base_Start_IT+0x80>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d111      	bne.n	80027a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b06      	cmp	r3, #6
 800278c:	d010      	beq.n	80027b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0201 	orr.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279e:	e007      	b.n	80027b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	40010000 	.word	0x40010000
 80027c4:	40000400 	.word	0x40000400
 80027c8:	40000800 	.word	0x40000800
 80027cc:	40000c00 	.word	0x40000c00
 80027d0:	40010400 	.word	0x40010400
 80027d4:	40014000 	.word	0x40014000
 80027d8:	40001800 	.word	0x40001800

080027dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d122      	bne.n	8002838 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d11b      	bne.n	8002838 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0202 	mvn.w	r2, #2
 8002808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2201      	movs	r2, #1
 800280e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f003 0303 	and.w	r3, r3, #3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8ee 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 8002824:	e005      	b.n	8002832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f8e0 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f8f1 	bl	8002a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0304 	and.w	r3, r3, #4
 8002842:	2b04      	cmp	r3, #4
 8002844:	d122      	bne.n	800288c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b04      	cmp	r3, #4
 8002852:	d11b      	bne.n	800288c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0204 	mvn.w	r2, #4
 800285c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2202      	movs	r2, #2
 8002862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f8c4 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 8002878:	e005      	b.n	8002886 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f8b6 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f8c7 	bl	8002a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b08      	cmp	r3, #8
 8002898:	d122      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b08      	cmp	r3, #8
 80028a6:	d11b      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0208 	mvn.w	r2, #8
 80028b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2204      	movs	r2, #4
 80028b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f89a 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 80028cc:	e005      	b.n	80028da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 f88c 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f89d 	bl	8002a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d122      	bne.n	8002934 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b10      	cmp	r3, #16
 80028fa:	d11b      	bne.n	8002934 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0210 	mvn.w	r2, #16
 8002904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2208      	movs	r2, #8
 800290a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f870 	bl	8002a00 <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f862 	bl	80029ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f873 	bl	8002a14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b01      	cmp	r3, #1
 8002940:	d10e      	bne.n	8002960 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b01      	cmp	r3, #1
 800294e:	d107      	bne.n	8002960 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0201 	mvn.w	r2, #1
 8002958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7fe f900 	bl	8000b60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800296a:	2b80      	cmp	r3, #128	; 0x80
 800296c:	d10e      	bne.n	800298c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002978:	2b80      	cmp	r3, #128	; 0x80
 800297a:	d107      	bne.n	800298c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f902 	bl	8002b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002996:	2b40      	cmp	r3, #64	; 0x40
 8002998:	d10e      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a4:	2b40      	cmp	r3, #64	; 0x40
 80029a6:	d107      	bne.n	80029b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80029b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f838 	bl	8002a28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d10e      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d107      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f06f 0220 	mvn.w	r2, #32
 80029dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f8cc 	bl	8002b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029e4:	bf00      	nop
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a40      	ldr	r2, [pc, #256]	; (8002b50 <TIM_Base_SetConfig+0x114>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d013      	beq.n	8002a7c <TIM_Base_SetConfig+0x40>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5a:	d00f      	beq.n	8002a7c <TIM_Base_SetConfig+0x40>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a3d      	ldr	r2, [pc, #244]	; (8002b54 <TIM_Base_SetConfig+0x118>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d00b      	beq.n	8002a7c <TIM_Base_SetConfig+0x40>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a3c      	ldr	r2, [pc, #240]	; (8002b58 <TIM_Base_SetConfig+0x11c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d007      	beq.n	8002a7c <TIM_Base_SetConfig+0x40>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a3b      	ldr	r2, [pc, #236]	; (8002b5c <TIM_Base_SetConfig+0x120>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d003      	beq.n	8002a7c <TIM_Base_SetConfig+0x40>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a3a      	ldr	r2, [pc, #232]	; (8002b60 <TIM_Base_SetConfig+0x124>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d108      	bne.n	8002a8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a2f      	ldr	r2, [pc, #188]	; (8002b50 <TIM_Base_SetConfig+0x114>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d02b      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9c:	d027      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a2c      	ldr	r2, [pc, #176]	; (8002b54 <TIM_Base_SetConfig+0x118>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d023      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a2b      	ldr	r2, [pc, #172]	; (8002b58 <TIM_Base_SetConfig+0x11c>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d01f      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a2a      	ldr	r2, [pc, #168]	; (8002b5c <TIM_Base_SetConfig+0x120>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d01b      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a29      	ldr	r2, [pc, #164]	; (8002b60 <TIM_Base_SetConfig+0x124>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d017      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a28      	ldr	r2, [pc, #160]	; (8002b64 <TIM_Base_SetConfig+0x128>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a27      	ldr	r2, [pc, #156]	; (8002b68 <TIM_Base_SetConfig+0x12c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00f      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a26      	ldr	r2, [pc, #152]	; (8002b6c <TIM_Base_SetConfig+0x130>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00b      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a25      	ldr	r2, [pc, #148]	; (8002b70 <TIM_Base_SetConfig+0x134>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d007      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a24      	ldr	r2, [pc, #144]	; (8002b74 <TIM_Base_SetConfig+0x138>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d003      	beq.n	8002aee <TIM_Base_SetConfig+0xb2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <TIM_Base_SetConfig+0x13c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d108      	bne.n	8002b00 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <TIM_Base_SetConfig+0x114>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d003      	beq.n	8002b34 <TIM_Base_SetConfig+0xf8>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a0c      	ldr	r2, [pc, #48]	; (8002b60 <TIM_Base_SetConfig+0x124>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d103      	bne.n	8002b3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	691a      	ldr	r2, [r3, #16]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	615a      	str	r2, [r3, #20]
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40000800 	.word	0x40000800
 8002b5c:	40000c00 	.word	0x40000c00
 8002b60:	40010400 	.word	0x40010400
 8002b64:	40014000 	.word	0x40014000
 8002b68:	40014400 	.word	0x40014400
 8002b6c:	40014800 	.word	0x40014800
 8002b70:	40001800 	.word	0x40001800
 8002b74:	40001c00 	.word	0x40001c00
 8002b78:	40002000 	.word	0x40002000

08002b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <__errno>:
 8002ba4:	4b01      	ldr	r3, [pc, #4]	; (8002bac <__errno+0x8>)
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000014 	.word	0x20000014

08002bb0 <__libc_init_array>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	4d0d      	ldr	r5, [pc, #52]	; (8002be8 <__libc_init_array+0x38>)
 8002bb4:	4c0d      	ldr	r4, [pc, #52]	; (8002bec <__libc_init_array+0x3c>)
 8002bb6:	1b64      	subs	r4, r4, r5
 8002bb8:	10a4      	asrs	r4, r4, #2
 8002bba:	2600      	movs	r6, #0
 8002bbc:	42a6      	cmp	r6, r4
 8002bbe:	d109      	bne.n	8002bd4 <__libc_init_array+0x24>
 8002bc0:	4d0b      	ldr	r5, [pc, #44]	; (8002bf0 <__libc_init_array+0x40>)
 8002bc2:	4c0c      	ldr	r4, [pc, #48]	; (8002bf4 <__libc_init_array+0x44>)
 8002bc4:	f000 fcaa 	bl	800351c <_init>
 8002bc8:	1b64      	subs	r4, r4, r5
 8002bca:	10a4      	asrs	r4, r4, #2
 8002bcc:	2600      	movs	r6, #0
 8002bce:	42a6      	cmp	r6, r4
 8002bd0:	d105      	bne.n	8002bde <__libc_init_array+0x2e>
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd8:	4798      	blx	r3
 8002bda:	3601      	adds	r6, #1
 8002bdc:	e7ee      	b.n	8002bbc <__libc_init_array+0xc>
 8002bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be2:	4798      	blx	r3
 8002be4:	3601      	adds	r6, #1
 8002be6:	e7f2      	b.n	8002bce <__libc_init_array+0x1e>
 8002be8:	08004328 	.word	0x08004328
 8002bec:	08004328 	.word	0x08004328
 8002bf0:	08004328 	.word	0x08004328
 8002bf4:	0800432c 	.word	0x0800432c

08002bf8 <__itoa>:
 8002bf8:	1e93      	subs	r3, r2, #2
 8002bfa:	2b22      	cmp	r3, #34	; 0x22
 8002bfc:	b510      	push	{r4, lr}
 8002bfe:	460c      	mov	r4, r1
 8002c00:	d904      	bls.n	8002c0c <__itoa+0x14>
 8002c02:	2300      	movs	r3, #0
 8002c04:	700b      	strb	r3, [r1, #0]
 8002c06:	461c      	mov	r4, r3
 8002c08:	4620      	mov	r0, r4
 8002c0a:	bd10      	pop	{r4, pc}
 8002c0c:	2a0a      	cmp	r2, #10
 8002c0e:	d109      	bne.n	8002c24 <__itoa+0x2c>
 8002c10:	2800      	cmp	r0, #0
 8002c12:	da07      	bge.n	8002c24 <__itoa+0x2c>
 8002c14:	232d      	movs	r3, #45	; 0x2d
 8002c16:	700b      	strb	r3, [r1, #0]
 8002c18:	4240      	negs	r0, r0
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	4421      	add	r1, r4
 8002c1e:	f000 f82d 	bl	8002c7c <__utoa>
 8002c22:	e7f1      	b.n	8002c08 <__itoa+0x10>
 8002c24:	2100      	movs	r1, #0
 8002c26:	e7f9      	b.n	8002c1c <__itoa+0x24>

08002c28 <itoa>:
 8002c28:	f7ff bfe6 	b.w	8002bf8 <__itoa>

08002c2c <memset>:
 8002c2c:	4402      	add	r2, r0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d100      	bne.n	8002c36 <memset+0xa>
 8002c34:	4770      	bx	lr
 8002c36:	f803 1b01 	strb.w	r1, [r3], #1
 8002c3a:	e7f9      	b.n	8002c30 <memset+0x4>

08002c3c <siprintf>:
 8002c3c:	b40e      	push	{r1, r2, r3}
 8002c3e:	b500      	push	{lr}
 8002c40:	b09c      	sub	sp, #112	; 0x70
 8002c42:	ab1d      	add	r3, sp, #116	; 0x74
 8002c44:	9002      	str	r0, [sp, #8]
 8002c46:	9006      	str	r0, [sp, #24]
 8002c48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002c4c:	4809      	ldr	r0, [pc, #36]	; (8002c74 <siprintf+0x38>)
 8002c4e:	9107      	str	r1, [sp, #28]
 8002c50:	9104      	str	r1, [sp, #16]
 8002c52:	4909      	ldr	r1, [pc, #36]	; (8002c78 <siprintf+0x3c>)
 8002c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8002c58:	9105      	str	r1, [sp, #20]
 8002c5a:	6800      	ldr	r0, [r0, #0]
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	a902      	add	r1, sp, #8
 8002c60:	f000 f8aa 	bl	8002db8 <_svfiprintf_r>
 8002c64:	9b02      	ldr	r3, [sp, #8]
 8002c66:	2200      	movs	r2, #0
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	b01c      	add	sp, #112	; 0x70
 8002c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002c70:	b003      	add	sp, #12
 8002c72:	4770      	bx	lr
 8002c74:	20000014 	.word	0x20000014
 8002c78:	ffff0208 	.word	0xffff0208

08002c7c <__utoa>:
 8002c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c7e:	4c1f      	ldr	r4, [pc, #124]	; (8002cfc <__utoa+0x80>)
 8002c80:	b08b      	sub	sp, #44	; 0x2c
 8002c82:	4605      	mov	r5, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	466e      	mov	r6, sp
 8002c88:	f104 0c20 	add.w	ip, r4, #32
 8002c8c:	6820      	ldr	r0, [r4, #0]
 8002c8e:	6861      	ldr	r1, [r4, #4]
 8002c90:	4637      	mov	r7, r6
 8002c92:	c703      	stmia	r7!, {r0, r1}
 8002c94:	3408      	adds	r4, #8
 8002c96:	4564      	cmp	r4, ip
 8002c98:	463e      	mov	r6, r7
 8002c9a:	d1f7      	bne.n	8002c8c <__utoa+0x10>
 8002c9c:	7921      	ldrb	r1, [r4, #4]
 8002c9e:	7139      	strb	r1, [r7, #4]
 8002ca0:	1e91      	subs	r1, r2, #2
 8002ca2:	6820      	ldr	r0, [r4, #0]
 8002ca4:	6038      	str	r0, [r7, #0]
 8002ca6:	2922      	cmp	r1, #34	; 0x22
 8002ca8:	f04f 0100 	mov.w	r1, #0
 8002cac:	d904      	bls.n	8002cb8 <__utoa+0x3c>
 8002cae:	7019      	strb	r1, [r3, #0]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	b00b      	add	sp, #44	; 0x2c
 8002cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cb8:	1e58      	subs	r0, r3, #1
 8002cba:	4684      	mov	ip, r0
 8002cbc:	fbb5 f7f2 	udiv	r7, r5, r2
 8002cc0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8002cc4:	fb02 5617 	mls	r6, r2, r7, r5
 8002cc8:	4476      	add	r6, lr
 8002cca:	460c      	mov	r4, r1
 8002ccc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8002cd0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8002cd4:	462e      	mov	r6, r5
 8002cd6:	42b2      	cmp	r2, r6
 8002cd8:	f101 0101 	add.w	r1, r1, #1
 8002cdc:	463d      	mov	r5, r7
 8002cde:	d9ed      	bls.n	8002cbc <__utoa+0x40>
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	545a      	strb	r2, [r3, r1]
 8002ce4:	1919      	adds	r1, r3, r4
 8002ce6:	1aa5      	subs	r5, r4, r2
 8002ce8:	42aa      	cmp	r2, r5
 8002cea:	dae2      	bge.n	8002cb2 <__utoa+0x36>
 8002cec:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8002cf0:	780e      	ldrb	r6, [r1, #0]
 8002cf2:	7006      	strb	r6, [r0, #0]
 8002cf4:	3201      	adds	r2, #1
 8002cf6:	f801 5901 	strb.w	r5, [r1], #-1
 8002cfa:	e7f4      	b.n	8002ce6 <__utoa+0x6a>
 8002cfc:	080042c8 	.word	0x080042c8

08002d00 <__ssputs_r>:
 8002d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d04:	688e      	ldr	r6, [r1, #8]
 8002d06:	429e      	cmp	r6, r3
 8002d08:	4682      	mov	sl, r0
 8002d0a:	460c      	mov	r4, r1
 8002d0c:	4690      	mov	r8, r2
 8002d0e:	461f      	mov	r7, r3
 8002d10:	d838      	bhi.n	8002d84 <__ssputs_r+0x84>
 8002d12:	898a      	ldrh	r2, [r1, #12]
 8002d14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002d18:	d032      	beq.n	8002d80 <__ssputs_r+0x80>
 8002d1a:	6825      	ldr	r5, [r4, #0]
 8002d1c:	6909      	ldr	r1, [r1, #16]
 8002d1e:	eba5 0901 	sub.w	r9, r5, r1
 8002d22:	6965      	ldr	r5, [r4, #20]
 8002d24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002d28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	444b      	add	r3, r9
 8002d30:	106d      	asrs	r5, r5, #1
 8002d32:	429d      	cmp	r5, r3
 8002d34:	bf38      	it	cc
 8002d36:	461d      	movcc	r5, r3
 8002d38:	0553      	lsls	r3, r2, #21
 8002d3a:	d531      	bpl.n	8002da0 <__ssputs_r+0xa0>
 8002d3c:	4629      	mov	r1, r5
 8002d3e:	f000 fb47 	bl	80033d0 <_malloc_r>
 8002d42:	4606      	mov	r6, r0
 8002d44:	b950      	cbnz	r0, 8002d5c <__ssputs_r+0x5c>
 8002d46:	230c      	movs	r3, #12
 8002d48:	f8ca 3000 	str.w	r3, [sl]
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d52:	81a3      	strh	r3, [r4, #12]
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d5c:	6921      	ldr	r1, [r4, #16]
 8002d5e:	464a      	mov	r2, r9
 8002d60:	f000 fabe 	bl	80032e0 <memcpy>
 8002d64:	89a3      	ldrh	r3, [r4, #12]
 8002d66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d6e:	81a3      	strh	r3, [r4, #12]
 8002d70:	6126      	str	r6, [r4, #16]
 8002d72:	6165      	str	r5, [r4, #20]
 8002d74:	444e      	add	r6, r9
 8002d76:	eba5 0509 	sub.w	r5, r5, r9
 8002d7a:	6026      	str	r6, [r4, #0]
 8002d7c:	60a5      	str	r5, [r4, #8]
 8002d7e:	463e      	mov	r6, r7
 8002d80:	42be      	cmp	r6, r7
 8002d82:	d900      	bls.n	8002d86 <__ssputs_r+0x86>
 8002d84:	463e      	mov	r6, r7
 8002d86:	4632      	mov	r2, r6
 8002d88:	6820      	ldr	r0, [r4, #0]
 8002d8a:	4641      	mov	r1, r8
 8002d8c:	f000 fab6 	bl	80032fc <memmove>
 8002d90:	68a3      	ldr	r3, [r4, #8]
 8002d92:	6822      	ldr	r2, [r4, #0]
 8002d94:	1b9b      	subs	r3, r3, r6
 8002d96:	4432      	add	r2, r6
 8002d98:	60a3      	str	r3, [r4, #8]
 8002d9a:	6022      	str	r2, [r4, #0]
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	e7db      	b.n	8002d58 <__ssputs_r+0x58>
 8002da0:	462a      	mov	r2, r5
 8002da2:	f000 fb6f 	bl	8003484 <_realloc_r>
 8002da6:	4606      	mov	r6, r0
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d1e1      	bne.n	8002d70 <__ssputs_r+0x70>
 8002dac:	6921      	ldr	r1, [r4, #16]
 8002dae:	4650      	mov	r0, sl
 8002db0:	f000 fabe 	bl	8003330 <_free_r>
 8002db4:	e7c7      	b.n	8002d46 <__ssputs_r+0x46>
	...

08002db8 <_svfiprintf_r>:
 8002db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dbc:	4698      	mov	r8, r3
 8002dbe:	898b      	ldrh	r3, [r1, #12]
 8002dc0:	061b      	lsls	r3, r3, #24
 8002dc2:	b09d      	sub	sp, #116	; 0x74
 8002dc4:	4607      	mov	r7, r0
 8002dc6:	460d      	mov	r5, r1
 8002dc8:	4614      	mov	r4, r2
 8002dca:	d50e      	bpl.n	8002dea <_svfiprintf_r+0x32>
 8002dcc:	690b      	ldr	r3, [r1, #16]
 8002dce:	b963      	cbnz	r3, 8002dea <_svfiprintf_r+0x32>
 8002dd0:	2140      	movs	r1, #64	; 0x40
 8002dd2:	f000 fafd 	bl	80033d0 <_malloc_r>
 8002dd6:	6028      	str	r0, [r5, #0]
 8002dd8:	6128      	str	r0, [r5, #16]
 8002dda:	b920      	cbnz	r0, 8002de6 <_svfiprintf_r+0x2e>
 8002ddc:	230c      	movs	r3, #12
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	f04f 30ff 	mov.w	r0, #4294967295
 8002de4:	e0d1      	b.n	8002f8a <_svfiprintf_r+0x1d2>
 8002de6:	2340      	movs	r3, #64	; 0x40
 8002de8:	616b      	str	r3, [r5, #20]
 8002dea:	2300      	movs	r3, #0
 8002dec:	9309      	str	r3, [sp, #36]	; 0x24
 8002dee:	2320      	movs	r3, #32
 8002df0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002df4:	f8cd 800c 	str.w	r8, [sp, #12]
 8002df8:	2330      	movs	r3, #48	; 0x30
 8002dfa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002fa4 <_svfiprintf_r+0x1ec>
 8002dfe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002e02:	f04f 0901 	mov.w	r9, #1
 8002e06:	4623      	mov	r3, r4
 8002e08:	469a      	mov	sl, r3
 8002e0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002e0e:	b10a      	cbz	r2, 8002e14 <_svfiprintf_r+0x5c>
 8002e10:	2a25      	cmp	r2, #37	; 0x25
 8002e12:	d1f9      	bne.n	8002e08 <_svfiprintf_r+0x50>
 8002e14:	ebba 0b04 	subs.w	fp, sl, r4
 8002e18:	d00b      	beq.n	8002e32 <_svfiprintf_r+0x7a>
 8002e1a:	465b      	mov	r3, fp
 8002e1c:	4622      	mov	r2, r4
 8002e1e:	4629      	mov	r1, r5
 8002e20:	4638      	mov	r0, r7
 8002e22:	f7ff ff6d 	bl	8002d00 <__ssputs_r>
 8002e26:	3001      	adds	r0, #1
 8002e28:	f000 80aa 	beq.w	8002f80 <_svfiprintf_r+0x1c8>
 8002e2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e2e:	445a      	add	r2, fp
 8002e30:	9209      	str	r2, [sp, #36]	; 0x24
 8002e32:	f89a 3000 	ldrb.w	r3, [sl]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f000 80a2 	beq.w	8002f80 <_svfiprintf_r+0x1c8>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e46:	f10a 0a01 	add.w	sl, sl, #1
 8002e4a:	9304      	str	r3, [sp, #16]
 8002e4c:	9307      	str	r3, [sp, #28]
 8002e4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e52:	931a      	str	r3, [sp, #104]	; 0x68
 8002e54:	4654      	mov	r4, sl
 8002e56:	2205      	movs	r2, #5
 8002e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e5c:	4851      	ldr	r0, [pc, #324]	; (8002fa4 <_svfiprintf_r+0x1ec>)
 8002e5e:	f7fd f9c7 	bl	80001f0 <memchr>
 8002e62:	9a04      	ldr	r2, [sp, #16]
 8002e64:	b9d8      	cbnz	r0, 8002e9e <_svfiprintf_r+0xe6>
 8002e66:	06d0      	lsls	r0, r2, #27
 8002e68:	bf44      	itt	mi
 8002e6a:	2320      	movmi	r3, #32
 8002e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e70:	0711      	lsls	r1, r2, #28
 8002e72:	bf44      	itt	mi
 8002e74:	232b      	movmi	r3, #43	; 0x2b
 8002e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e7a:	f89a 3000 	ldrb.w	r3, [sl]
 8002e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8002e80:	d015      	beq.n	8002eae <_svfiprintf_r+0xf6>
 8002e82:	9a07      	ldr	r2, [sp, #28]
 8002e84:	4654      	mov	r4, sl
 8002e86:	2000      	movs	r0, #0
 8002e88:	f04f 0c0a 	mov.w	ip, #10
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e92:	3b30      	subs	r3, #48	; 0x30
 8002e94:	2b09      	cmp	r3, #9
 8002e96:	d94e      	bls.n	8002f36 <_svfiprintf_r+0x17e>
 8002e98:	b1b0      	cbz	r0, 8002ec8 <_svfiprintf_r+0x110>
 8002e9a:	9207      	str	r2, [sp, #28]
 8002e9c:	e014      	b.n	8002ec8 <_svfiprintf_r+0x110>
 8002e9e:	eba0 0308 	sub.w	r3, r0, r8
 8002ea2:	fa09 f303 	lsl.w	r3, r9, r3
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	9304      	str	r3, [sp, #16]
 8002eaa:	46a2      	mov	sl, r4
 8002eac:	e7d2      	b.n	8002e54 <_svfiprintf_r+0x9c>
 8002eae:	9b03      	ldr	r3, [sp, #12]
 8002eb0:	1d19      	adds	r1, r3, #4
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	9103      	str	r1, [sp, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	bfbb      	ittet	lt
 8002eba:	425b      	neglt	r3, r3
 8002ebc:	f042 0202 	orrlt.w	r2, r2, #2
 8002ec0:	9307      	strge	r3, [sp, #28]
 8002ec2:	9307      	strlt	r3, [sp, #28]
 8002ec4:	bfb8      	it	lt
 8002ec6:	9204      	strlt	r2, [sp, #16]
 8002ec8:	7823      	ldrb	r3, [r4, #0]
 8002eca:	2b2e      	cmp	r3, #46	; 0x2e
 8002ecc:	d10c      	bne.n	8002ee8 <_svfiprintf_r+0x130>
 8002ece:	7863      	ldrb	r3, [r4, #1]
 8002ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8002ed2:	d135      	bne.n	8002f40 <_svfiprintf_r+0x188>
 8002ed4:	9b03      	ldr	r3, [sp, #12]
 8002ed6:	1d1a      	adds	r2, r3, #4
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	9203      	str	r2, [sp, #12]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	bfb8      	it	lt
 8002ee0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ee4:	3402      	adds	r4, #2
 8002ee6:	9305      	str	r3, [sp, #20]
 8002ee8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002fb4 <_svfiprintf_r+0x1fc>
 8002eec:	7821      	ldrb	r1, [r4, #0]
 8002eee:	2203      	movs	r2, #3
 8002ef0:	4650      	mov	r0, sl
 8002ef2:	f7fd f97d 	bl	80001f0 <memchr>
 8002ef6:	b140      	cbz	r0, 8002f0a <_svfiprintf_r+0x152>
 8002ef8:	2340      	movs	r3, #64	; 0x40
 8002efa:	eba0 000a 	sub.w	r0, r0, sl
 8002efe:	fa03 f000 	lsl.w	r0, r3, r0
 8002f02:	9b04      	ldr	r3, [sp, #16]
 8002f04:	4303      	orrs	r3, r0
 8002f06:	3401      	adds	r4, #1
 8002f08:	9304      	str	r3, [sp, #16]
 8002f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f0e:	4826      	ldr	r0, [pc, #152]	; (8002fa8 <_svfiprintf_r+0x1f0>)
 8002f10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f14:	2206      	movs	r2, #6
 8002f16:	f7fd f96b 	bl	80001f0 <memchr>
 8002f1a:	2800      	cmp	r0, #0
 8002f1c:	d038      	beq.n	8002f90 <_svfiprintf_r+0x1d8>
 8002f1e:	4b23      	ldr	r3, [pc, #140]	; (8002fac <_svfiprintf_r+0x1f4>)
 8002f20:	bb1b      	cbnz	r3, 8002f6a <_svfiprintf_r+0x1b2>
 8002f22:	9b03      	ldr	r3, [sp, #12]
 8002f24:	3307      	adds	r3, #7
 8002f26:	f023 0307 	bic.w	r3, r3, #7
 8002f2a:	3308      	adds	r3, #8
 8002f2c:	9303      	str	r3, [sp, #12]
 8002f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f30:	4433      	add	r3, r6
 8002f32:	9309      	str	r3, [sp, #36]	; 0x24
 8002f34:	e767      	b.n	8002e06 <_svfiprintf_r+0x4e>
 8002f36:	fb0c 3202 	mla	r2, ip, r2, r3
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	e7a5      	b.n	8002e8c <_svfiprintf_r+0xd4>
 8002f40:	2300      	movs	r3, #0
 8002f42:	3401      	adds	r4, #1
 8002f44:	9305      	str	r3, [sp, #20]
 8002f46:	4619      	mov	r1, r3
 8002f48:	f04f 0c0a 	mov.w	ip, #10
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f52:	3a30      	subs	r2, #48	; 0x30
 8002f54:	2a09      	cmp	r2, #9
 8002f56:	d903      	bls.n	8002f60 <_svfiprintf_r+0x1a8>
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0c5      	beq.n	8002ee8 <_svfiprintf_r+0x130>
 8002f5c:	9105      	str	r1, [sp, #20]
 8002f5e:	e7c3      	b.n	8002ee8 <_svfiprintf_r+0x130>
 8002f60:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f64:	4604      	mov	r4, r0
 8002f66:	2301      	movs	r3, #1
 8002f68:	e7f0      	b.n	8002f4c <_svfiprintf_r+0x194>
 8002f6a:	ab03      	add	r3, sp, #12
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	462a      	mov	r2, r5
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <_svfiprintf_r+0x1f8>)
 8002f72:	a904      	add	r1, sp, #16
 8002f74:	4638      	mov	r0, r7
 8002f76:	f3af 8000 	nop.w
 8002f7a:	1c42      	adds	r2, r0, #1
 8002f7c:	4606      	mov	r6, r0
 8002f7e:	d1d6      	bne.n	8002f2e <_svfiprintf_r+0x176>
 8002f80:	89ab      	ldrh	r3, [r5, #12]
 8002f82:	065b      	lsls	r3, r3, #25
 8002f84:	f53f af2c 	bmi.w	8002de0 <_svfiprintf_r+0x28>
 8002f88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f8a:	b01d      	add	sp, #116	; 0x74
 8002f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f90:	ab03      	add	r3, sp, #12
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	462a      	mov	r2, r5
 8002f96:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <_svfiprintf_r+0x1f8>)
 8002f98:	a904      	add	r1, sp, #16
 8002f9a:	4638      	mov	r0, r7
 8002f9c:	f000 f87a 	bl	8003094 <_printf_i>
 8002fa0:	e7eb      	b.n	8002f7a <_svfiprintf_r+0x1c2>
 8002fa2:	bf00      	nop
 8002fa4:	080042ed 	.word	0x080042ed
 8002fa8:	080042f7 	.word	0x080042f7
 8002fac:	00000000 	.word	0x00000000
 8002fb0:	08002d01 	.word	0x08002d01
 8002fb4:	080042f3 	.word	0x080042f3

08002fb8 <_printf_common>:
 8002fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fbc:	4616      	mov	r6, r2
 8002fbe:	4699      	mov	r9, r3
 8002fc0:	688a      	ldr	r2, [r1, #8]
 8002fc2:	690b      	ldr	r3, [r1, #16]
 8002fc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	bfb8      	it	lt
 8002fcc:	4613      	movlt	r3, r2
 8002fce:	6033      	str	r3, [r6, #0]
 8002fd0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fd4:	4607      	mov	r7, r0
 8002fd6:	460c      	mov	r4, r1
 8002fd8:	b10a      	cbz	r2, 8002fde <_printf_common+0x26>
 8002fda:	3301      	adds	r3, #1
 8002fdc:	6033      	str	r3, [r6, #0]
 8002fde:	6823      	ldr	r3, [r4, #0]
 8002fe0:	0699      	lsls	r1, r3, #26
 8002fe2:	bf42      	ittt	mi
 8002fe4:	6833      	ldrmi	r3, [r6, #0]
 8002fe6:	3302      	addmi	r3, #2
 8002fe8:	6033      	strmi	r3, [r6, #0]
 8002fea:	6825      	ldr	r5, [r4, #0]
 8002fec:	f015 0506 	ands.w	r5, r5, #6
 8002ff0:	d106      	bne.n	8003000 <_printf_common+0x48>
 8002ff2:	f104 0a19 	add.w	sl, r4, #25
 8002ff6:	68e3      	ldr	r3, [r4, #12]
 8002ff8:	6832      	ldr	r2, [r6, #0]
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	42ab      	cmp	r3, r5
 8002ffe:	dc26      	bgt.n	800304e <_printf_common+0x96>
 8003000:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003004:	1e13      	subs	r3, r2, #0
 8003006:	6822      	ldr	r2, [r4, #0]
 8003008:	bf18      	it	ne
 800300a:	2301      	movne	r3, #1
 800300c:	0692      	lsls	r2, r2, #26
 800300e:	d42b      	bmi.n	8003068 <_printf_common+0xb0>
 8003010:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003014:	4649      	mov	r1, r9
 8003016:	4638      	mov	r0, r7
 8003018:	47c0      	blx	r8
 800301a:	3001      	adds	r0, #1
 800301c:	d01e      	beq.n	800305c <_printf_common+0xa4>
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	68e5      	ldr	r5, [r4, #12]
 8003022:	6832      	ldr	r2, [r6, #0]
 8003024:	f003 0306 	and.w	r3, r3, #6
 8003028:	2b04      	cmp	r3, #4
 800302a:	bf08      	it	eq
 800302c:	1aad      	subeq	r5, r5, r2
 800302e:	68a3      	ldr	r3, [r4, #8]
 8003030:	6922      	ldr	r2, [r4, #16]
 8003032:	bf0c      	ite	eq
 8003034:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003038:	2500      	movne	r5, #0
 800303a:	4293      	cmp	r3, r2
 800303c:	bfc4      	itt	gt
 800303e:	1a9b      	subgt	r3, r3, r2
 8003040:	18ed      	addgt	r5, r5, r3
 8003042:	2600      	movs	r6, #0
 8003044:	341a      	adds	r4, #26
 8003046:	42b5      	cmp	r5, r6
 8003048:	d11a      	bne.n	8003080 <_printf_common+0xc8>
 800304a:	2000      	movs	r0, #0
 800304c:	e008      	b.n	8003060 <_printf_common+0xa8>
 800304e:	2301      	movs	r3, #1
 8003050:	4652      	mov	r2, sl
 8003052:	4649      	mov	r1, r9
 8003054:	4638      	mov	r0, r7
 8003056:	47c0      	blx	r8
 8003058:	3001      	adds	r0, #1
 800305a:	d103      	bne.n	8003064 <_printf_common+0xac>
 800305c:	f04f 30ff 	mov.w	r0, #4294967295
 8003060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003064:	3501      	adds	r5, #1
 8003066:	e7c6      	b.n	8002ff6 <_printf_common+0x3e>
 8003068:	18e1      	adds	r1, r4, r3
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	2030      	movs	r0, #48	; 0x30
 800306e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003072:	4422      	add	r2, r4
 8003074:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003078:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800307c:	3302      	adds	r3, #2
 800307e:	e7c7      	b.n	8003010 <_printf_common+0x58>
 8003080:	2301      	movs	r3, #1
 8003082:	4622      	mov	r2, r4
 8003084:	4649      	mov	r1, r9
 8003086:	4638      	mov	r0, r7
 8003088:	47c0      	blx	r8
 800308a:	3001      	adds	r0, #1
 800308c:	d0e6      	beq.n	800305c <_printf_common+0xa4>
 800308e:	3601      	adds	r6, #1
 8003090:	e7d9      	b.n	8003046 <_printf_common+0x8e>
	...

08003094 <_printf_i>:
 8003094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003098:	460c      	mov	r4, r1
 800309a:	4691      	mov	r9, r2
 800309c:	7e27      	ldrb	r7, [r4, #24]
 800309e:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030a0:	2f78      	cmp	r7, #120	; 0x78
 80030a2:	4680      	mov	r8, r0
 80030a4:	469a      	mov	sl, r3
 80030a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030aa:	d807      	bhi.n	80030bc <_printf_i+0x28>
 80030ac:	2f62      	cmp	r7, #98	; 0x62
 80030ae:	d80a      	bhi.n	80030c6 <_printf_i+0x32>
 80030b0:	2f00      	cmp	r7, #0
 80030b2:	f000 80d8 	beq.w	8003266 <_printf_i+0x1d2>
 80030b6:	2f58      	cmp	r7, #88	; 0x58
 80030b8:	f000 80a3 	beq.w	8003202 <_printf_i+0x16e>
 80030bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80030c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80030c4:	e03a      	b.n	800313c <_printf_i+0xa8>
 80030c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80030ca:	2b15      	cmp	r3, #21
 80030cc:	d8f6      	bhi.n	80030bc <_printf_i+0x28>
 80030ce:	a001      	add	r0, pc, #4	; (adr r0, 80030d4 <_printf_i+0x40>)
 80030d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80030d4:	0800312d 	.word	0x0800312d
 80030d8:	08003141 	.word	0x08003141
 80030dc:	080030bd 	.word	0x080030bd
 80030e0:	080030bd 	.word	0x080030bd
 80030e4:	080030bd 	.word	0x080030bd
 80030e8:	080030bd 	.word	0x080030bd
 80030ec:	08003141 	.word	0x08003141
 80030f0:	080030bd 	.word	0x080030bd
 80030f4:	080030bd 	.word	0x080030bd
 80030f8:	080030bd 	.word	0x080030bd
 80030fc:	080030bd 	.word	0x080030bd
 8003100:	0800324d 	.word	0x0800324d
 8003104:	08003171 	.word	0x08003171
 8003108:	0800322f 	.word	0x0800322f
 800310c:	080030bd 	.word	0x080030bd
 8003110:	080030bd 	.word	0x080030bd
 8003114:	0800326f 	.word	0x0800326f
 8003118:	080030bd 	.word	0x080030bd
 800311c:	08003171 	.word	0x08003171
 8003120:	080030bd 	.word	0x080030bd
 8003124:	080030bd 	.word	0x080030bd
 8003128:	08003237 	.word	0x08003237
 800312c:	680b      	ldr	r3, [r1, #0]
 800312e:	1d1a      	adds	r2, r3, #4
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	600a      	str	r2, [r1, #0]
 8003134:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003138:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800313c:	2301      	movs	r3, #1
 800313e:	e0a3      	b.n	8003288 <_printf_i+0x1f4>
 8003140:	6825      	ldr	r5, [r4, #0]
 8003142:	6808      	ldr	r0, [r1, #0]
 8003144:	062e      	lsls	r6, r5, #24
 8003146:	f100 0304 	add.w	r3, r0, #4
 800314a:	d50a      	bpl.n	8003162 <_printf_i+0xce>
 800314c:	6805      	ldr	r5, [r0, #0]
 800314e:	600b      	str	r3, [r1, #0]
 8003150:	2d00      	cmp	r5, #0
 8003152:	da03      	bge.n	800315c <_printf_i+0xc8>
 8003154:	232d      	movs	r3, #45	; 0x2d
 8003156:	426d      	negs	r5, r5
 8003158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800315c:	485e      	ldr	r0, [pc, #376]	; (80032d8 <_printf_i+0x244>)
 800315e:	230a      	movs	r3, #10
 8003160:	e019      	b.n	8003196 <_printf_i+0x102>
 8003162:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003166:	6805      	ldr	r5, [r0, #0]
 8003168:	600b      	str	r3, [r1, #0]
 800316a:	bf18      	it	ne
 800316c:	b22d      	sxthne	r5, r5
 800316e:	e7ef      	b.n	8003150 <_printf_i+0xbc>
 8003170:	680b      	ldr	r3, [r1, #0]
 8003172:	6825      	ldr	r5, [r4, #0]
 8003174:	1d18      	adds	r0, r3, #4
 8003176:	6008      	str	r0, [r1, #0]
 8003178:	0628      	lsls	r0, r5, #24
 800317a:	d501      	bpl.n	8003180 <_printf_i+0xec>
 800317c:	681d      	ldr	r5, [r3, #0]
 800317e:	e002      	b.n	8003186 <_printf_i+0xf2>
 8003180:	0669      	lsls	r1, r5, #25
 8003182:	d5fb      	bpl.n	800317c <_printf_i+0xe8>
 8003184:	881d      	ldrh	r5, [r3, #0]
 8003186:	4854      	ldr	r0, [pc, #336]	; (80032d8 <_printf_i+0x244>)
 8003188:	2f6f      	cmp	r7, #111	; 0x6f
 800318a:	bf0c      	ite	eq
 800318c:	2308      	moveq	r3, #8
 800318e:	230a      	movne	r3, #10
 8003190:	2100      	movs	r1, #0
 8003192:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003196:	6866      	ldr	r6, [r4, #4]
 8003198:	60a6      	str	r6, [r4, #8]
 800319a:	2e00      	cmp	r6, #0
 800319c:	bfa2      	ittt	ge
 800319e:	6821      	ldrge	r1, [r4, #0]
 80031a0:	f021 0104 	bicge.w	r1, r1, #4
 80031a4:	6021      	strge	r1, [r4, #0]
 80031a6:	b90d      	cbnz	r5, 80031ac <_printf_i+0x118>
 80031a8:	2e00      	cmp	r6, #0
 80031aa:	d04d      	beq.n	8003248 <_printf_i+0x1b4>
 80031ac:	4616      	mov	r6, r2
 80031ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80031b2:	fb03 5711 	mls	r7, r3, r1, r5
 80031b6:	5dc7      	ldrb	r7, [r0, r7]
 80031b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80031bc:	462f      	mov	r7, r5
 80031be:	42bb      	cmp	r3, r7
 80031c0:	460d      	mov	r5, r1
 80031c2:	d9f4      	bls.n	80031ae <_printf_i+0x11a>
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d10b      	bne.n	80031e0 <_printf_i+0x14c>
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	07df      	lsls	r7, r3, #31
 80031cc:	d508      	bpl.n	80031e0 <_printf_i+0x14c>
 80031ce:	6923      	ldr	r3, [r4, #16]
 80031d0:	6861      	ldr	r1, [r4, #4]
 80031d2:	4299      	cmp	r1, r3
 80031d4:	bfde      	ittt	le
 80031d6:	2330      	movle	r3, #48	; 0x30
 80031d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80031dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80031e0:	1b92      	subs	r2, r2, r6
 80031e2:	6122      	str	r2, [r4, #16]
 80031e4:	f8cd a000 	str.w	sl, [sp]
 80031e8:	464b      	mov	r3, r9
 80031ea:	aa03      	add	r2, sp, #12
 80031ec:	4621      	mov	r1, r4
 80031ee:	4640      	mov	r0, r8
 80031f0:	f7ff fee2 	bl	8002fb8 <_printf_common>
 80031f4:	3001      	adds	r0, #1
 80031f6:	d14c      	bne.n	8003292 <_printf_i+0x1fe>
 80031f8:	f04f 30ff 	mov.w	r0, #4294967295
 80031fc:	b004      	add	sp, #16
 80031fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003202:	4835      	ldr	r0, [pc, #212]	; (80032d8 <_printf_i+0x244>)
 8003204:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	680e      	ldr	r6, [r1, #0]
 800320c:	061f      	lsls	r7, r3, #24
 800320e:	f856 5b04 	ldr.w	r5, [r6], #4
 8003212:	600e      	str	r6, [r1, #0]
 8003214:	d514      	bpl.n	8003240 <_printf_i+0x1ac>
 8003216:	07d9      	lsls	r1, r3, #31
 8003218:	bf44      	itt	mi
 800321a:	f043 0320 	orrmi.w	r3, r3, #32
 800321e:	6023      	strmi	r3, [r4, #0]
 8003220:	b91d      	cbnz	r5, 800322a <_printf_i+0x196>
 8003222:	6823      	ldr	r3, [r4, #0]
 8003224:	f023 0320 	bic.w	r3, r3, #32
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	2310      	movs	r3, #16
 800322c:	e7b0      	b.n	8003190 <_printf_i+0xfc>
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	f043 0320 	orr.w	r3, r3, #32
 8003234:	6023      	str	r3, [r4, #0]
 8003236:	2378      	movs	r3, #120	; 0x78
 8003238:	4828      	ldr	r0, [pc, #160]	; (80032dc <_printf_i+0x248>)
 800323a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800323e:	e7e3      	b.n	8003208 <_printf_i+0x174>
 8003240:	065e      	lsls	r6, r3, #25
 8003242:	bf48      	it	mi
 8003244:	b2ad      	uxthmi	r5, r5
 8003246:	e7e6      	b.n	8003216 <_printf_i+0x182>
 8003248:	4616      	mov	r6, r2
 800324a:	e7bb      	b.n	80031c4 <_printf_i+0x130>
 800324c:	680b      	ldr	r3, [r1, #0]
 800324e:	6826      	ldr	r6, [r4, #0]
 8003250:	6960      	ldr	r0, [r4, #20]
 8003252:	1d1d      	adds	r5, r3, #4
 8003254:	600d      	str	r5, [r1, #0]
 8003256:	0635      	lsls	r5, r6, #24
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	d501      	bpl.n	8003260 <_printf_i+0x1cc>
 800325c:	6018      	str	r0, [r3, #0]
 800325e:	e002      	b.n	8003266 <_printf_i+0x1d2>
 8003260:	0671      	lsls	r1, r6, #25
 8003262:	d5fb      	bpl.n	800325c <_printf_i+0x1c8>
 8003264:	8018      	strh	r0, [r3, #0]
 8003266:	2300      	movs	r3, #0
 8003268:	6123      	str	r3, [r4, #16]
 800326a:	4616      	mov	r6, r2
 800326c:	e7ba      	b.n	80031e4 <_printf_i+0x150>
 800326e:	680b      	ldr	r3, [r1, #0]
 8003270:	1d1a      	adds	r2, r3, #4
 8003272:	600a      	str	r2, [r1, #0]
 8003274:	681e      	ldr	r6, [r3, #0]
 8003276:	6862      	ldr	r2, [r4, #4]
 8003278:	2100      	movs	r1, #0
 800327a:	4630      	mov	r0, r6
 800327c:	f7fc ffb8 	bl	80001f0 <memchr>
 8003280:	b108      	cbz	r0, 8003286 <_printf_i+0x1f2>
 8003282:	1b80      	subs	r0, r0, r6
 8003284:	6060      	str	r0, [r4, #4]
 8003286:	6863      	ldr	r3, [r4, #4]
 8003288:	6123      	str	r3, [r4, #16]
 800328a:	2300      	movs	r3, #0
 800328c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003290:	e7a8      	b.n	80031e4 <_printf_i+0x150>
 8003292:	6923      	ldr	r3, [r4, #16]
 8003294:	4632      	mov	r2, r6
 8003296:	4649      	mov	r1, r9
 8003298:	4640      	mov	r0, r8
 800329a:	47d0      	blx	sl
 800329c:	3001      	adds	r0, #1
 800329e:	d0ab      	beq.n	80031f8 <_printf_i+0x164>
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	079b      	lsls	r3, r3, #30
 80032a4:	d413      	bmi.n	80032ce <_printf_i+0x23a>
 80032a6:	68e0      	ldr	r0, [r4, #12]
 80032a8:	9b03      	ldr	r3, [sp, #12]
 80032aa:	4298      	cmp	r0, r3
 80032ac:	bfb8      	it	lt
 80032ae:	4618      	movlt	r0, r3
 80032b0:	e7a4      	b.n	80031fc <_printf_i+0x168>
 80032b2:	2301      	movs	r3, #1
 80032b4:	4632      	mov	r2, r6
 80032b6:	4649      	mov	r1, r9
 80032b8:	4640      	mov	r0, r8
 80032ba:	47d0      	blx	sl
 80032bc:	3001      	adds	r0, #1
 80032be:	d09b      	beq.n	80031f8 <_printf_i+0x164>
 80032c0:	3501      	adds	r5, #1
 80032c2:	68e3      	ldr	r3, [r4, #12]
 80032c4:	9903      	ldr	r1, [sp, #12]
 80032c6:	1a5b      	subs	r3, r3, r1
 80032c8:	42ab      	cmp	r3, r5
 80032ca:	dcf2      	bgt.n	80032b2 <_printf_i+0x21e>
 80032cc:	e7eb      	b.n	80032a6 <_printf_i+0x212>
 80032ce:	2500      	movs	r5, #0
 80032d0:	f104 0619 	add.w	r6, r4, #25
 80032d4:	e7f5      	b.n	80032c2 <_printf_i+0x22e>
 80032d6:	bf00      	nop
 80032d8:	080042fe 	.word	0x080042fe
 80032dc:	0800430f 	.word	0x0800430f

080032e0 <memcpy>:
 80032e0:	440a      	add	r2, r1
 80032e2:	4291      	cmp	r1, r2
 80032e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80032e8:	d100      	bne.n	80032ec <memcpy+0xc>
 80032ea:	4770      	bx	lr
 80032ec:	b510      	push	{r4, lr}
 80032ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80032f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80032f6:	4291      	cmp	r1, r2
 80032f8:	d1f9      	bne.n	80032ee <memcpy+0xe>
 80032fa:	bd10      	pop	{r4, pc}

080032fc <memmove>:
 80032fc:	4288      	cmp	r0, r1
 80032fe:	b510      	push	{r4, lr}
 8003300:	eb01 0402 	add.w	r4, r1, r2
 8003304:	d902      	bls.n	800330c <memmove+0x10>
 8003306:	4284      	cmp	r4, r0
 8003308:	4623      	mov	r3, r4
 800330a:	d807      	bhi.n	800331c <memmove+0x20>
 800330c:	1e43      	subs	r3, r0, #1
 800330e:	42a1      	cmp	r1, r4
 8003310:	d008      	beq.n	8003324 <memmove+0x28>
 8003312:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003316:	f803 2f01 	strb.w	r2, [r3, #1]!
 800331a:	e7f8      	b.n	800330e <memmove+0x12>
 800331c:	4402      	add	r2, r0
 800331e:	4601      	mov	r1, r0
 8003320:	428a      	cmp	r2, r1
 8003322:	d100      	bne.n	8003326 <memmove+0x2a>
 8003324:	bd10      	pop	{r4, pc}
 8003326:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800332a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800332e:	e7f7      	b.n	8003320 <memmove+0x24>

08003330 <_free_r>:
 8003330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003332:	2900      	cmp	r1, #0
 8003334:	d048      	beq.n	80033c8 <_free_r+0x98>
 8003336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800333a:	9001      	str	r0, [sp, #4]
 800333c:	2b00      	cmp	r3, #0
 800333e:	f1a1 0404 	sub.w	r4, r1, #4
 8003342:	bfb8      	it	lt
 8003344:	18e4      	addlt	r4, r4, r3
 8003346:	f000 f8d3 	bl	80034f0 <__malloc_lock>
 800334a:	4a20      	ldr	r2, [pc, #128]	; (80033cc <_free_r+0x9c>)
 800334c:	9801      	ldr	r0, [sp, #4]
 800334e:	6813      	ldr	r3, [r2, #0]
 8003350:	4615      	mov	r5, r2
 8003352:	b933      	cbnz	r3, 8003362 <_free_r+0x32>
 8003354:	6063      	str	r3, [r4, #4]
 8003356:	6014      	str	r4, [r2, #0]
 8003358:	b003      	add	sp, #12
 800335a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800335e:	f000 b8cd 	b.w	80034fc <__malloc_unlock>
 8003362:	42a3      	cmp	r3, r4
 8003364:	d90b      	bls.n	800337e <_free_r+0x4e>
 8003366:	6821      	ldr	r1, [r4, #0]
 8003368:	1862      	adds	r2, r4, r1
 800336a:	4293      	cmp	r3, r2
 800336c:	bf04      	itt	eq
 800336e:	681a      	ldreq	r2, [r3, #0]
 8003370:	685b      	ldreq	r3, [r3, #4]
 8003372:	6063      	str	r3, [r4, #4]
 8003374:	bf04      	itt	eq
 8003376:	1852      	addeq	r2, r2, r1
 8003378:	6022      	streq	r2, [r4, #0]
 800337a:	602c      	str	r4, [r5, #0]
 800337c:	e7ec      	b.n	8003358 <_free_r+0x28>
 800337e:	461a      	mov	r2, r3
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	b10b      	cbz	r3, 8003388 <_free_r+0x58>
 8003384:	42a3      	cmp	r3, r4
 8003386:	d9fa      	bls.n	800337e <_free_r+0x4e>
 8003388:	6811      	ldr	r1, [r2, #0]
 800338a:	1855      	adds	r5, r2, r1
 800338c:	42a5      	cmp	r5, r4
 800338e:	d10b      	bne.n	80033a8 <_free_r+0x78>
 8003390:	6824      	ldr	r4, [r4, #0]
 8003392:	4421      	add	r1, r4
 8003394:	1854      	adds	r4, r2, r1
 8003396:	42a3      	cmp	r3, r4
 8003398:	6011      	str	r1, [r2, #0]
 800339a:	d1dd      	bne.n	8003358 <_free_r+0x28>
 800339c:	681c      	ldr	r4, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	6053      	str	r3, [r2, #4]
 80033a2:	4421      	add	r1, r4
 80033a4:	6011      	str	r1, [r2, #0]
 80033a6:	e7d7      	b.n	8003358 <_free_r+0x28>
 80033a8:	d902      	bls.n	80033b0 <_free_r+0x80>
 80033aa:	230c      	movs	r3, #12
 80033ac:	6003      	str	r3, [r0, #0]
 80033ae:	e7d3      	b.n	8003358 <_free_r+0x28>
 80033b0:	6825      	ldr	r5, [r4, #0]
 80033b2:	1961      	adds	r1, r4, r5
 80033b4:	428b      	cmp	r3, r1
 80033b6:	bf04      	itt	eq
 80033b8:	6819      	ldreq	r1, [r3, #0]
 80033ba:	685b      	ldreq	r3, [r3, #4]
 80033bc:	6063      	str	r3, [r4, #4]
 80033be:	bf04      	itt	eq
 80033c0:	1949      	addeq	r1, r1, r5
 80033c2:	6021      	streq	r1, [r4, #0]
 80033c4:	6054      	str	r4, [r2, #4]
 80033c6:	e7c7      	b.n	8003358 <_free_r+0x28>
 80033c8:	b003      	add	sp, #12
 80033ca:	bd30      	pop	{r4, r5, pc}
 80033cc:	200004a0 	.word	0x200004a0

080033d0 <_malloc_r>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	1ccd      	adds	r5, r1, #3
 80033d4:	f025 0503 	bic.w	r5, r5, #3
 80033d8:	3508      	adds	r5, #8
 80033da:	2d0c      	cmp	r5, #12
 80033dc:	bf38      	it	cc
 80033de:	250c      	movcc	r5, #12
 80033e0:	2d00      	cmp	r5, #0
 80033e2:	4606      	mov	r6, r0
 80033e4:	db01      	blt.n	80033ea <_malloc_r+0x1a>
 80033e6:	42a9      	cmp	r1, r5
 80033e8:	d903      	bls.n	80033f2 <_malloc_r+0x22>
 80033ea:	230c      	movs	r3, #12
 80033ec:	6033      	str	r3, [r6, #0]
 80033ee:	2000      	movs	r0, #0
 80033f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033f2:	f000 f87d 	bl	80034f0 <__malloc_lock>
 80033f6:	4921      	ldr	r1, [pc, #132]	; (800347c <_malloc_r+0xac>)
 80033f8:	680a      	ldr	r2, [r1, #0]
 80033fa:	4614      	mov	r4, r2
 80033fc:	b99c      	cbnz	r4, 8003426 <_malloc_r+0x56>
 80033fe:	4f20      	ldr	r7, [pc, #128]	; (8003480 <_malloc_r+0xb0>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	b923      	cbnz	r3, 800340e <_malloc_r+0x3e>
 8003404:	4621      	mov	r1, r4
 8003406:	4630      	mov	r0, r6
 8003408:	f000 f862 	bl	80034d0 <_sbrk_r>
 800340c:	6038      	str	r0, [r7, #0]
 800340e:	4629      	mov	r1, r5
 8003410:	4630      	mov	r0, r6
 8003412:	f000 f85d 	bl	80034d0 <_sbrk_r>
 8003416:	1c43      	adds	r3, r0, #1
 8003418:	d123      	bne.n	8003462 <_malloc_r+0x92>
 800341a:	230c      	movs	r3, #12
 800341c:	6033      	str	r3, [r6, #0]
 800341e:	4630      	mov	r0, r6
 8003420:	f000 f86c 	bl	80034fc <__malloc_unlock>
 8003424:	e7e3      	b.n	80033ee <_malloc_r+0x1e>
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	1b5b      	subs	r3, r3, r5
 800342a:	d417      	bmi.n	800345c <_malloc_r+0x8c>
 800342c:	2b0b      	cmp	r3, #11
 800342e:	d903      	bls.n	8003438 <_malloc_r+0x68>
 8003430:	6023      	str	r3, [r4, #0]
 8003432:	441c      	add	r4, r3
 8003434:	6025      	str	r5, [r4, #0]
 8003436:	e004      	b.n	8003442 <_malloc_r+0x72>
 8003438:	6863      	ldr	r3, [r4, #4]
 800343a:	42a2      	cmp	r2, r4
 800343c:	bf0c      	ite	eq
 800343e:	600b      	streq	r3, [r1, #0]
 8003440:	6053      	strne	r3, [r2, #4]
 8003442:	4630      	mov	r0, r6
 8003444:	f000 f85a 	bl	80034fc <__malloc_unlock>
 8003448:	f104 000b 	add.w	r0, r4, #11
 800344c:	1d23      	adds	r3, r4, #4
 800344e:	f020 0007 	bic.w	r0, r0, #7
 8003452:	1ac2      	subs	r2, r0, r3
 8003454:	d0cc      	beq.n	80033f0 <_malloc_r+0x20>
 8003456:	1a1b      	subs	r3, r3, r0
 8003458:	50a3      	str	r3, [r4, r2]
 800345a:	e7c9      	b.n	80033f0 <_malloc_r+0x20>
 800345c:	4622      	mov	r2, r4
 800345e:	6864      	ldr	r4, [r4, #4]
 8003460:	e7cc      	b.n	80033fc <_malloc_r+0x2c>
 8003462:	1cc4      	adds	r4, r0, #3
 8003464:	f024 0403 	bic.w	r4, r4, #3
 8003468:	42a0      	cmp	r0, r4
 800346a:	d0e3      	beq.n	8003434 <_malloc_r+0x64>
 800346c:	1a21      	subs	r1, r4, r0
 800346e:	4630      	mov	r0, r6
 8003470:	f000 f82e 	bl	80034d0 <_sbrk_r>
 8003474:	3001      	adds	r0, #1
 8003476:	d1dd      	bne.n	8003434 <_malloc_r+0x64>
 8003478:	e7cf      	b.n	800341a <_malloc_r+0x4a>
 800347a:	bf00      	nop
 800347c:	200004a0 	.word	0x200004a0
 8003480:	200004a4 	.word	0x200004a4

08003484 <_realloc_r>:
 8003484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003486:	4607      	mov	r7, r0
 8003488:	4614      	mov	r4, r2
 800348a:	460e      	mov	r6, r1
 800348c:	b921      	cbnz	r1, 8003498 <_realloc_r+0x14>
 800348e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003492:	4611      	mov	r1, r2
 8003494:	f7ff bf9c 	b.w	80033d0 <_malloc_r>
 8003498:	b922      	cbnz	r2, 80034a4 <_realloc_r+0x20>
 800349a:	f7ff ff49 	bl	8003330 <_free_r>
 800349e:	4625      	mov	r5, r4
 80034a0:	4628      	mov	r0, r5
 80034a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80034a4:	f000 f830 	bl	8003508 <_malloc_usable_size_r>
 80034a8:	42a0      	cmp	r0, r4
 80034aa:	d20f      	bcs.n	80034cc <_realloc_r+0x48>
 80034ac:	4621      	mov	r1, r4
 80034ae:	4638      	mov	r0, r7
 80034b0:	f7ff ff8e 	bl	80033d0 <_malloc_r>
 80034b4:	4605      	mov	r5, r0
 80034b6:	2800      	cmp	r0, #0
 80034b8:	d0f2      	beq.n	80034a0 <_realloc_r+0x1c>
 80034ba:	4631      	mov	r1, r6
 80034bc:	4622      	mov	r2, r4
 80034be:	f7ff ff0f 	bl	80032e0 <memcpy>
 80034c2:	4631      	mov	r1, r6
 80034c4:	4638      	mov	r0, r7
 80034c6:	f7ff ff33 	bl	8003330 <_free_r>
 80034ca:	e7e9      	b.n	80034a0 <_realloc_r+0x1c>
 80034cc:	4635      	mov	r5, r6
 80034ce:	e7e7      	b.n	80034a0 <_realloc_r+0x1c>

080034d0 <_sbrk_r>:
 80034d0:	b538      	push	{r3, r4, r5, lr}
 80034d2:	4d06      	ldr	r5, [pc, #24]	; (80034ec <_sbrk_r+0x1c>)
 80034d4:	2300      	movs	r3, #0
 80034d6:	4604      	mov	r4, r0
 80034d8:	4608      	mov	r0, r1
 80034da:	602b      	str	r3, [r5, #0]
 80034dc:	f7fd fee8 	bl	80012b0 <_sbrk>
 80034e0:	1c43      	adds	r3, r0, #1
 80034e2:	d102      	bne.n	80034ea <_sbrk_r+0x1a>
 80034e4:	682b      	ldr	r3, [r5, #0]
 80034e6:	b103      	cbz	r3, 80034ea <_sbrk_r+0x1a>
 80034e8:	6023      	str	r3, [r4, #0]
 80034ea:	bd38      	pop	{r3, r4, r5, pc}
 80034ec:	20000558 	.word	0x20000558

080034f0 <__malloc_lock>:
 80034f0:	4801      	ldr	r0, [pc, #4]	; (80034f8 <__malloc_lock+0x8>)
 80034f2:	f000 b811 	b.w	8003518 <__retarget_lock_acquire_recursive>
 80034f6:	bf00      	nop
 80034f8:	20000560 	.word	0x20000560

080034fc <__malloc_unlock>:
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <__malloc_unlock+0x8>)
 80034fe:	f000 b80c 	b.w	800351a <__retarget_lock_release_recursive>
 8003502:	bf00      	nop
 8003504:	20000560 	.word	0x20000560

08003508 <_malloc_usable_size_r>:
 8003508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800350c:	1f18      	subs	r0, r3, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	bfbc      	itt	lt
 8003512:	580b      	ldrlt	r3, [r1, r0]
 8003514:	18c0      	addlt	r0, r0, r3
 8003516:	4770      	bx	lr

08003518 <__retarget_lock_acquire_recursive>:
 8003518:	4770      	bx	lr

0800351a <__retarget_lock_release_recursive>:
 800351a:	4770      	bx	lr

0800351c <_init>:
 800351c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800351e:	bf00      	nop
 8003520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003522:	bc08      	pop	{r3}
 8003524:	469e      	mov	lr, r3
 8003526:	4770      	bx	lr

08003528 <_fini>:
 8003528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800352a:	bf00      	nop
 800352c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800352e:	bc08      	pop	{r3}
 8003530:	469e      	mov	lr, r3
 8003532:	4770      	bx	lr
